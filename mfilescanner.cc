
#line 1 "mfilescanner.rl"
#include "mfilescanner.h"

#include <cstring>
#include <cstdlib>
#include <iostream>
#include <algorithm>
extern "C" {
#include <unistd.h>
}

#define DEBUG 1
using std::cerr;
using std::cout;
using std::cin;
using std::endl;
using std::string;
using std::vector;
using std::map;
using std::set;
using std::istream;


#line 26 "mfilescanner.cc"
static const unsigned char _MFileScanner_actions[] = {
	0, 1, 0, 1, 1, 1, 3, 1, 
	4, 1, 6, 1, 7, 1, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 1, 
	14, 1, 15, 1, 16, 1, 17, 1, 
	21, 1, 23, 1, 24, 1, 25, 1, 
	28, 1, 29, 1, 30, 1, 31, 1, 
	32, 1, 33, 1, 34, 1, 35, 1, 
	36, 1, 37, 1, 38, 1, 39, 1, 
	40, 1, 41, 1, 44, 1, 45, 1, 
	52, 1, 53, 1, 55, 1, 56, 1, 
	59, 1, 60, 1, 63, 1, 64, 1, 
	65, 1, 66, 1, 67, 1, 69, 1, 
	70, 1, 71, 1, 72, 1, 73, 1, 
	75, 1, 76, 1, 79, 1, 81, 1, 
	82, 1, 83, 1, 85, 1, 86, 1, 
	87, 1, 88, 1, 89, 1, 90, 1, 
	91, 1, 98, 1, 99, 1, 100, 1, 
	101, 1, 102, 1, 107, 1, 108, 1, 
	109, 1, 116, 1, 119, 1, 120, 1, 
	121, 1, 122, 1, 123, 1, 124, 1, 
	125, 1, 126, 1, 132, 1, 133, 1, 
	134, 1, 139, 1, 140, 1, 141, 1, 
	142, 1, 143, 1, 144, 1, 145, 1, 
	146, 2, 0, 2, 2, 0, 5, 2, 
	0, 13, 2, 0, 26, 2, 0, 27, 
	2, 0, 39, 2, 0, 40, 2, 0, 
	41, 2, 0, 42, 2, 0, 43, 2, 
	0, 46, 2, 0, 48, 2, 0, 49, 
	2, 0, 50, 2, 0, 51, 2, 0, 
	56, 2, 0, 61, 2, 0, 62, 2, 
	0, 68, 2, 0, 77, 2, 0, 80, 
	2, 0, 84, 2, 0, 94, 2, 0, 
	95, 2, 0, 96, 2, 0, 97, 2, 
	0, 104, 2, 0, 105, 2, 0, 106, 
	2, 0, 107, 2, 0, 110, 2, 0, 
	111, 2, 0, 112, 2, 0, 113, 2, 
	0, 114, 2, 0, 115, 2, 0, 117, 
	2, 0, 118, 2, 0, 127, 2, 0, 
	128, 2, 0, 130, 2, 0, 131, 2, 
	0, 136, 2, 0, 137, 2, 0, 138, 
	2, 6, 14, 2, 6, 15, 2, 7, 
	9, 2, 7, 44, 2, 12, 54, 2, 
	14, 52, 2, 16, 6, 2, 16, 14, 
	2, 16, 15, 2, 17, 14, 2, 18, 
	56, 2, 20, 22, 2, 25, 7, 2, 
	39, 0, 2, 39, 14, 2, 40, 0, 
	2, 40, 14, 2, 41, 0, 2, 41, 
	14, 2, 47, 7, 2, 52, 7, 2, 
	57, 59, 2, 58, 59, 2, 59, 14, 
	2, 59, 60, 2, 64, 14, 2, 64, 
	66, 2, 67, 14, 2, 67, 65, 2, 
	73, 74, 2, 76, 7, 2, 76, 12, 
	2, 76, 19, 2, 76, 92, 2, 76, 
	103, 2, 76, 129, 2, 76, 135, 2, 
	93, 0, 3, 0, 6, 15, 3, 0, 
	13, 15, 3, 0, 13, 39, 3, 0, 
	13, 40, 3, 0, 13, 41, 3, 0, 
	13, 46, 3, 0, 13, 50, 3, 0, 
	13, 56, 3, 0, 13, 78, 3, 0, 
	13, 96, 3, 0, 136, 13, 3, 7, 
	0, 48, 3, 8, 0, 49, 3, 18, 
	6, 59, 3, 39, 0, 13, 3, 40, 
	0, 13, 3, 41, 0, 13, 3, 47, 
	7, 53, 3, 52, 0, 51, 3, 59, 
	0, 62, 3, 64, 0, 68, 3, 67, 
	0, 68, 3, 76, 0, 92, 4, 0, 
	13, 6, 15, 4, 76, 0, 13, 92, 
	4, 76, 11, 0, 13
};

static const short _MFileScanner_key_offsets[] = {
	0, 0, 7, 8, 13, 14, 15, 16, 
	17, 18, 19, 20, 21, 22, 23, 24, 
	25, 26, 27, 28, 30, 32, 33, 37, 
	38, 43, 46, 47, 51, 54, 56, 58, 
	61, 64, 68, 69, 76, 77, 79, 86, 
	93, 100, 101, 109, 110, 112, 114, 122, 
	130, 138, 145, 146, 148, 149, 150, 154, 
	155, 161, 163, 164, 165, 169, 170, 177, 
	184, 191, 192, 199, 200, 202, 209, 216, 
	223, 224, 225, 233, 241, 249, 257, 265, 
	273, 281, 287, 290, 293, 296, 299, 302, 
	305, 308, 311, 314, 317, 320, 323, 326, 
	329, 332, 335, 338, 341, 344, 347, 350, 
	353, 356, 359, 362, 365, 368, 371, 374, 
	376, 387, 393, 398, 400, 401, 402, 412, 
	432, 437, 439, 445, 448, 460, 461, 463, 
	465, 467, 469, 471, 473, 475, 477, 478, 
	480, 482, 484, 486, 488, 490, 491, 493, 
	495, 496, 501, 511, 514, 518, 519, 521, 
	523, 525, 527, 529, 531, 533, 534, 536, 
	538, 540, 542, 544, 546, 547, 549, 551, 
	552, 557, 567, 570, 574, 575, 577, 579, 
	581, 583, 585, 587, 589, 591, 593, 596, 
	600, 601, 603, 607, 609, 611, 613, 615, 
	617, 618, 620, 622, 624, 626, 628, 630, 
	631, 633, 635, 636, 641, 651, 654, 658, 
	659, 661, 663, 665, 666, 668, 670, 672, 
	674, 676, 678, 681, 685, 686, 687, 688, 
	690, 692, 694, 696, 699, 702, 705, 708, 
	713, 717, 718, 723, 728, 730, 731, 732, 
	735, 736, 737, 738, 739, 740, 741, 742, 
	748, 750, 751, 752, 756, 757, 759, 764, 
	767, 770, 776, 778, 784, 785, 786, 787, 
	794, 795, 797, 805, 807, 808, 809, 813, 
	814, 816, 817, 818, 819, 820, 821, 822, 
	826, 831, 834, 836, 842, 844, 852, 854, 
	855, 856, 860, 861, 863, 864, 865, 866, 
	867, 868, 869, 873, 878, 888, 890, 900, 
	901, 902, 906, 907, 908, 909, 910, 911, 
	912, 913, 914, 915, 920, 922, 923, 924, 
	928, 929, 935, 937, 938, 939, 943, 944, 
	948, 952, 954, 956, 958, 960, 962, 964, 
	966, 968, 970, 972, 974, 976, 978, 980, 
	981, 982, 983, 984, 985, 989, 994, 998, 
	1002, 1010, 1018, 1023, 1025, 1027, 1028, 1029, 
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1041, 
	1043, 1044, 1045, 1049, 1050, 1056, 1058, 1059, 
	1060, 1064, 1065, 1069, 1073, 1075, 1077, 1079, 
	1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 
	1097, 1099, 1101, 1102, 1103, 1104, 1105, 1109, 
	1114, 1118, 1122, 1130, 1138, 1143, 1146, 1149, 
	1154, 1156, 1160, 1163, 1166, 1169, 1172, 1175, 
	1178, 1181, 1184, 1187, 1190, 1197, 1199, 1206, 
	1207, 1208, 1212, 1213, 1219, 1221, 1222, 1223, 
	1227, 1228, 1232, 1236, 1238, 1240, 1242, 1244, 
	1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 
	1262, 1264, 1267, 1270, 1275, 1277, 1285, 1287, 
	1295, 1296, 1297, 1301, 1302, 1305, 1308, 1313, 
	1315, 1321, 1327, 1331, 1335, 1339, 1343, 1350, 
	1354, 1358, 1362, 1366, 1370, 1374, 1378, 1382, 
	1386, 1390, 1393, 1396, 1399, 1402, 1405, 1408, 
	1411, 1414, 1421, 1423, 1430, 1431, 1432, 1436, 
	1437, 1440, 1443, 1448, 1450, 1458, 1460, 1468, 
	1469, 1470, 1474, 1475, 1478, 1481, 1486, 1488, 
	1494, 1500, 1504, 1508, 1512, 1516, 1520, 1524, 
	1528, 1532, 1536, 1540, 1544, 1548, 1552, 1556, 
	1559, 1562, 1565, 1568, 1571, 1575, 1579, 1582, 
	1585, 1588, 1591, 1594, 1597, 1600, 1603, 1606, 
	1613, 1615, 1622, 1623, 1624, 1628, 1629, 1632, 
	1635, 1640, 1642, 1650, 1652, 1660, 1661, 1662, 
	1666, 1667, 1670, 1673, 1678, 1680, 1686, 1692, 
	1696, 1700, 1704, 1708, 1712, 1716, 1720, 1724, 
	1728, 1732, 1736, 1740, 1744, 1748, 1751, 1754, 
	1757, 1760, 1764, 1768, 1776, 1784, 1789, 1790, 
	1791, 1792, 1793, 1798, 1800, 1801, 1802, 1806, 
	1807, 1808, 1809, 1813, 1814, 1816, 1820, 1824, 
	1832, 1840, 1845, 1847, 1848, 1849, 1850, 1851, 
	1855, 1860, 1864, 1868, 1876, 1884, 1889, 1890, 
	1891, 1895, 1896, 1903, 1912, 1913, 1918, 1923, 
	1924, 1927, 1930, 1931, 1938, 1949, 1960, 1961, 
	1964, 1974, 1983, 1984, 1989, 1994, 1995, 1998, 
	2001, 2002, 2012, 2022, 2023, 2025, 2036, 2038, 
	2039, 2040, 2044, 2045, 2047, 2048, 2049, 2050, 
	2051, 2052, 2053, 2057, 2062, 2069, 2071, 2077, 
	2083, 2085, 2086, 2087, 2091, 2092, 2103, 2105, 
	2106, 2107, 2111, 2112, 2113, 2114, 2115, 2116, 
	2117, 2118, 2119, 2123, 2128, 2141, 2143, 2156, 
	2157, 2158, 2162, 2163, 2164, 2165, 2166, 2167, 
	2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 
	2176, 2177, 2178, 2183, 2185, 2186, 2187, 2191, 
	2192, 2198, 2200, 2201, 2202, 2206, 2207, 2211, 
	2215, 2217, 2219, 2221, 2223, 2225, 2227, 2229, 
	2231, 2233, 2235, 2237, 2239, 2241, 2243, 2244, 
	2245, 2246, 2247, 2248, 2249, 2250, 2252, 2253, 
	2254, 2255, 2256, 2257, 2262, 2264, 2265, 2266, 
	2270, 2271, 2277, 2279, 2280, 2281, 2285, 2286, 
	2290, 2294, 2296, 2298, 2300, 2302, 2304, 2306, 
	2308, 2310, 2312, 2314, 2316, 2318, 2320, 2322, 
	2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 
	2331, 2332, 2333, 2334, 2335, 2336, 2339, 2342, 
	2347, 2349, 2353, 2356, 2359, 2362, 2365, 2368, 
	2371, 2374, 2377, 2380, 2383, 2390, 2392, 2399, 
	2400, 2401, 2405, 2406, 2412, 2414, 2415, 2416, 
	2420, 2421, 2425, 2429, 2431, 2433, 2435, 2437, 
	2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 
	2455, 2457, 2460, 2463, 2468, 2470, 2478, 2480, 
	2488, 2489, 2490, 2494, 2495, 2498, 2501, 2506, 
	2508, 2514, 2520, 2524, 2528, 2532, 2536, 2543, 
	2547, 2551, 2555, 2559, 2563, 2567, 2571, 2575, 
	2579, 2583, 2586, 2589, 2592, 2595, 2598, 2601, 
	2604, 2607, 2610, 2613, 2616, 2619, 2622, 2625, 
	2628, 2631, 2634, 2637, 2640, 2643, 2646, 2649, 
	2656, 2658, 2665, 2666, 2667, 2671, 2672, 2675, 
	2678, 2683, 2685, 2693, 2695, 2703, 2704, 2705, 
	2709, 2710, 2713, 2716, 2721, 2723, 2729, 2735, 
	2739, 2743, 2747, 2751, 2755, 2759, 2763, 2767, 
	2771, 2775, 2779, 2783, 2787, 2791, 2794, 2797, 
	2800, 2803, 2806, 2809, 2812, 2816, 2819, 2822, 
	2825, 2828, 2831, 2838, 2840, 2847, 2848, 2849, 
	2853, 2854, 2857, 2860, 2865, 2867, 2875, 2877, 
	2885, 2886, 2887, 2891, 2892, 2895, 2898, 2903, 
	2905, 2911, 2917, 2921, 2925, 2929, 2933, 2937, 
	2941, 2945, 2949, 2953, 2957, 2961, 2965, 2969, 
	2973, 2976, 2979, 2982, 2985, 2988, 2991, 2994, 
	2997, 3000, 3003, 3006, 3009, 3012, 3015, 3019, 
	3023, 3031, 3039, 3044, 3045, 3046, 3050, 3051, 
	3065, 3079, 3082, 3095, 3097, 3099, 3107, 3108, 
	3109, 3113, 3114, 3117, 3120, 3125, 3127, 3131, 
	3135, 3143, 3151, 3156, 3157, 3158, 3159, 3160, 
	3165, 3167, 3168, 3169, 3173, 3174, 3175, 3176, 
	3177, 3178, 3179, 3180, 3181, 3185, 3190, 3194, 
	3198, 3206, 3214, 3219, 3220, 3221, 3225, 3226, 
	3228, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 
	3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 
	3245, 3246, 3247, 3248, 3249, 3250, 3251, 3254, 
	3256, 3257, 3258, 3262, 3263, 3265, 3266, 3269, 
	3275, 3276, 3281, 3283, 3285, 3286, 3287, 3288, 
	3289, 3290, 3291, 3292, 3304, 3306, 3307, 3308, 
	3312, 3313, 3329, 3338, 3339, 3341, 3349, 3362, 
	3364, 3371, 3372, 3374, 3375, 3376, 3380, 3381, 
	3382, 3383, 3387, 3388, 3393, 3398, 3405, 3410, 
	3415, 3423, 3431, 3436, 3451, 3452, 3453, 3457, 
	3458, 3460, 3471, 3473, 3474, 3475, 3479, 3480, 
	3495, 3511, 3527, 3542, 3548, 3564, 3580, 3595, 
	3607, 3609, 3610, 3611, 3615, 3616, 3630, 3633, 
	3650, 3667, 3683, 3700, 3717, 3733, 3734, 3740, 
	3741, 3746, 3748, 3750, 3751, 3752, 3753, 3754, 
	3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 
	3763, 3764, 3765, 3774, 3776, 3777, 3778, 3782, 
	3783, 3798, 3806, 3807, 3809, 3810, 3817, 3819, 
	3820, 3821, 3825, 3826, 3835, 3837, 3838, 3839, 
	3843, 3844, 3858, 3865, 3867, 3876, 3878, 3879, 
	3880, 3884, 3885, 3899, 3905, 3907, 3908, 3909, 
	3913, 3914, 3915, 3916, 3920, 3921, 3922, 3923, 
	3927, 3928, 3928, 3929, 3944, 3946, 3947, 3949, 
	3950, 3958, 3969, 3978, 3987, 3996, 4004, 4013, 
	4022, 4031, 4040, 4049, 4058, 4067, 4076, 4085, 
	4094, 4106, 4114, 4116, 4120, 4124, 4131, 4137, 
	4143, 4147, 4153, 4159, 4160, 4169, 4176, 4179, 
	4191, 4193, 4202, 4211, 4218, 4221, 4224, 4227, 
	4227, 4232, 4238, 4245, 4245, 4251, 4258, 4267, 
	4272, 4281, 4287, 4289, 4292, 4292, 4292, 4292
};

static const char _MFileScanner_trans_keys[] = {
	9, 10, 13, 32, 37, 99, 102, 10, 
	9, 10, 13, 32, 37, 10, 108, 97, 
	115, 115, 100, 101, 102, 117, 110, 99, 
	116, 105, 111, 110, 0, 10, 0, 10, 
	46, 9, 10, 13, 32, 10, 95, 65, 
	90, 97, 122, 9, 32, 61, 61, 9, 
	32, 40, 59, 9, 32, 39, 10, 39, 
	10, 39, 9, 32, 41, 9, 32, 59, 
	9, 10, 13, 32, 10, 0, 9, 10, 
	13, 32, 37, 46, 10, 0, 10, 0, 
	9, 10, 13, 32, 37, 46, 0, 9, 
	10, 13, 32, 37, 46, 0, 9, 10, 
	13, 32, 37, 46, 10, 0, 9, 10, 
	13, 32, 37, 101, 102, 10, 0, 124, 
	0, 10, 0, 9, 10, 13, 32, 37, 
	46, 110, 0, 9, 10, 13, 32, 37, 
	46, 100, 0, 9, 10, 13, 32, 37, 
	46, 59, 9, 10, 13, 32, 37, 46, 
	59, 10, 0, 10, 46, 46, 9, 10, 
	13, 32, 10, 9, 10, 13, 32, 37, 
	46, 0, 10, 46, 46, 9, 10, 13, 
	32, 10, 0, 9, 10, 13, 32, 37, 
	46, 0, 9, 10, 13, 32, 37, 46, 
	0, 9, 10, 13, 32, 37, 46, 10, 
	0, 9, 10, 13, 32, 37, 46, 10, 
	0, 10, 0, 9, 10, 13, 32, 37, 
	46, 0, 9, 10, 13, 32, 37, 46, 
	0, 9, 10, 13, 32, 37, 46, 10, 
	10, 0, 9, 10, 13, 32, 37, 46, 
	117, 0, 9, 10, 13, 32, 37, 46, 
	110, 0, 9, 10, 13, 32, 37, 46, 
	99, 0, 9, 10, 13, 32, 37, 46, 
	116, 0, 9, 10, 13, 32, 37, 46, 
	105, 0, 9, 10, 13, 32, 37, 46, 
	111, 0, 9, 10, 13, 32, 37, 46, 
	110, 0, 13, 32, 37, 9, 10, 0, 
	32, 124, 0, 10, 84, 0, 10, 79, 
	0, 10, 32, 0, 10, 66, 0, 10, 
	69, 0, 10, 32, 0, 10, 65, 0, 
	10, 68, 0, 10, 74, 0, 10, 85, 
	0, 10, 83, 0, 10, 84, 0, 10, 
	69, 0, 10, 68, 0, 10, 32, 0, 
	10, 84, 0, 10, 79, 0, 10, 32, 
	0, 10, 78, 0, 10, 69, 0, 10, 
	87, 0, 10, 32, 0, 10, 83, 0, 
	10, 89, 0, 10, 78, 0, 10, 84, 
	0, 10, 65, 0, 10, 88, 0, 10, 
	0, 9, 10, 13, 32, 39, 58, 65, 
	90, 97, 122, 0, 9, 10, 13, 32, 
	58, 9, 10, 13, 32, 58, 0, 10, 
	10, 10, 0, 9, 10, 13, 32, 58, 
	65, 90, 97, 122, 0, 9, 10, 13, 
	32, 39, 44, 46, 58, 93, 95, 125, 
	40, 41, 48, 57, 65, 91, 97, 123, 
	9, 10, 13, 32, 58, 0, 10, 0, 
	9, 10, 13, 32, 58, 9, 32, 37, 
	9, 10, 13, 32, 71, 79, 80, 82, 
	103, 111, 112, 114, 10, 69, 101, 78, 
	110, 69, 101, 82, 114, 65, 97, 84, 
	116, 69, 101, 68, 100, 32, 70, 102, 
	73, 105, 69, 101, 76, 108, 68, 100, 
	83, 115, 32, 79, 111, 70, 102, 32, 
	95, 65, 90, 97, 122, 9, 32, 58, 
	95, 48, 57, 65, 90, 97, 122, 9, 
	32, 58, 9, 10, 13, 32, 10, 80, 
	112, 84, 116, 73, 105, 79, 111, 78, 
	110, 65, 97, 76, 108, 32, 70, 102, 
	73, 105, 69, 101, 76, 108, 68, 100, 
	83, 115, 32, 79, 111, 70, 102, 32, 
	95, 65, 90, 97, 122, 9, 32, 58, 
	95, 48, 57, 65, 90, 97, 122, 9, 
	32, 58, 9, 10, 13, 32, 10, 65, 
	97, 82, 114, 65, 97, 77, 109, 69, 
	101, 84, 116, 69, 101, 82, 114, 83, 
	115, 9, 32, 58, 9, 10, 13, 32, 
	10, 69, 101, 81, 84, 113, 116, 85, 
	117, 73, 105, 82, 114, 69, 101, 68, 
	100, 32, 70, 102, 73, 105, 69, 101, 
	76, 108, 68, 100, 83, 115, 32, 79, 
	111, 70, 102, 32, 95, 65, 90, 97, 
	122, 9, 32, 58, 95, 48, 57, 65, 
	90, 97, 122, 9, 32, 58, 9, 10, 
	13, 32, 10, 85, 117, 82, 114, 78, 
	110, 32, 86, 118, 65, 97, 76, 108, 
	85, 117, 69, 101, 83, 115, 9, 32, 
	58, 9, 10, 13, 32, 10, 10, 10, 
	65, 97, 76, 108, 83, 115, 79, 111, 
	9, 32, 37, 0, 10, 46, 0, 10, 
	46, 0, 10, 46, 9, 10, 13, 32, 
	46, 9, 10, 13, 32, 10, 9, 10, 
	13, 32, 46, 0, 9, 10, 13, 32, 
	0, 10, 10, 37, 9, 32, 102, 117, 
	110, 99, 116, 105, 111, 110, 0, 10, 
	13, 41, 46, 59, 0, 10, 46, 46, 
	9, 10, 13, 32, 10, 0, 10, 0, 
	9, 10, 32, 101, 0, 10, 110, 0, 
	10, 100, 0, 9, 10, 13, 32, 59, 
	0, 10, 9, 10, 13, 32, 101, 102, 
	10, 110, 100, 9, 10, 13, 32, 37, 
	40, 46, 10, 0, 10, 9, 32, 37, 
	46, 65, 71, 72, 83, 0, 10, 46, 
	46, 9, 10, 13, 32, 10, 98, 99, 
	115, 116, 114, 97, 99, 116, 37, 41, 
	44, 46, 0, 10, 37, 41, 44, 0, 
	10, 13, 0, 10, 9, 32, 37, 41, 
	44, 46, 10, 13, 9, 32, 37, 46, 
	65, 71, 72, 83, 0, 10, 46, 46, 
	9, 10, 13, 32, 10, 98, 99, 115, 
	116, 114, 97, 99, 116, 37, 41, 44, 
	46, 0, 10, 37, 41, 44, 0, 9, 
	10, 32, 37, 46, 65, 71, 72, 83, 
	0, 10, 9, 32, 37, 41, 44, 46, 
	65, 71, 72, 83, 46, 46, 9, 10, 
	13, 32, 10, 101, 116, 65, 99, 99, 
	101, 115, 115, 9, 32, 37, 46, 61, 
	0, 10, 46, 46, 9, 10, 13, 32, 
	10, 9, 32, 37, 46, 80, 112, 0, 
	10, 46, 46, 9, 10, 13, 32, 10, 
	82, 85, 114, 117, 73, 79, 105, 111, 
	86, 118, 65, 97, 84, 116, 69, 101, 
	84, 116, 69, 101, 67, 99, 84, 116, 
	69, 101, 68, 100, 66, 98, 76, 108, 
	73, 105, 67, 99, 105, 100, 100, 101, 
	110, 37, 41, 44, 46, 0, 10, 37, 
	41, 44, 37, 41, 44, 46, 37, 41, 
	44, 46, 9, 10, 13, 32, 37, 41, 
	44, 46, 9, 10, 13, 32, 37, 41, 
	44, 46, 10, 37, 41, 44, 46, 101, 
	116, 97, 116, 108, 101, 100, 65, 99, 
	99, 101, 115, 115, 9, 32, 37, 46, 
	61, 0, 10, 46, 46, 9, 10, 13, 
	32, 10, 9, 32, 37, 46, 80, 112, 
	0, 10, 46, 46, 9, 10, 13, 32, 
	10, 82, 85, 114, 117, 73, 79, 105, 
	111, 86, 118, 65, 97, 84, 116, 69, 
	101, 84, 116, 69, 101, 67, 99, 84, 
	116, 69, 101, 68, 100, 66, 98, 76, 
	108, 73, 105, 67, 99, 97, 116, 105, 
	99, 37, 41, 44, 46, 0, 10, 37, 
	41, 44, 37, 41, 44, 46, 37, 41, 
	44, 46, 9, 10, 13, 32, 37, 41, 
	44, 46, 9, 10, 13, 32, 37, 41, 
	44, 46, 10, 37, 41, 44, 46, 0, 
	10, 46, 0, 10, 46, 0, 9, 10, 
	13, 32, 0, 10, 0, 10, 98, 99, 
	0, 10, 115, 0, 10, 116, 0, 10, 
	114, 0, 10, 97, 0, 10, 99, 0, 
	10, 116, 0, 10, 99, 0, 10, 101, 
	0, 10, 115, 0, 10, 115, 0, 9, 
	10, 32, 37, 46, 61, 0, 10, 9, 
	32, 37, 41, 44, 46, 61, 46, 46, 
	9, 10, 13, 32, 10, 9, 32, 37, 
	46, 80, 112, 0, 10, 46, 46, 9, 
	10, 13, 32, 10, 82, 85, 114, 117, 
	73, 79, 105, 111, 86, 118, 65, 97, 
	84, 116, 69, 101, 84, 116, 69, 101, 
	67, 99, 84, 116, 69, 101, 68, 100, 
	66, 98, 76, 108, 73, 105, 67, 99, 
	0, 10, 46, 0, 10, 46, 0, 9, 
	10, 13, 32, 0, 10, 0, 9, 10, 
	32, 37, 46, 80, 112, 0, 10, 9, 
	32, 37, 41, 44, 46, 80, 112, 46, 
	46, 9, 10, 13, 32, 10, 0, 10, 
	46, 0, 10, 46, 0, 9, 10, 13, 
	32, 0, 10, 0, 10, 82, 85, 114, 
	117, 0, 10, 73, 79, 105, 111, 0, 
	10, 86, 118, 0, 10, 65, 97, 0, 
	10, 84, 116, 0, 10, 69, 101, 0, 
	9, 10, 32, 37, 41, 44, 0, 10, 
	84, 116, 0, 10, 69, 101, 0, 10, 
	67, 99, 0, 10, 84, 116, 0, 10, 
	69, 101, 0, 10, 68, 100, 0, 10, 
	66, 98, 0, 10, 76, 108, 0, 10, 
	73, 105, 0, 10, 67, 99, 0, 10, 
	101, 0, 10, 116, 0, 10, 65, 0, 
	10, 99, 0, 10, 99, 0, 10, 101, 
	0, 10, 115, 0, 10, 115, 0, 9, 
	10, 32, 37, 46, 61, 0, 10, 9, 
	32, 37, 41, 44, 46, 61, 46, 46, 
	9, 10, 13, 32, 10, 0, 10, 46, 
	0, 10, 46, 0, 9, 10, 13, 32, 
	0, 10, 0, 9, 10, 32, 37, 46, 
	80, 112, 0, 10, 9, 32, 37, 41, 
	44, 46, 80, 112, 46, 46, 9, 10, 
	13, 32, 10, 0, 10, 46, 0, 10, 
	46, 0, 9, 10, 13, 32, 0, 10, 
	0, 10, 82, 85, 114, 117, 0, 10, 
	73, 79, 105, 111, 0, 10, 86, 118, 
	0, 10, 65, 97, 0, 10, 84, 116, 
	0, 10, 69, 101, 0, 10, 84, 116, 
	0, 10, 69, 101, 0, 10, 67, 99, 
	0, 10, 84, 116, 0, 10, 69, 101, 
	0, 10, 68, 100, 0, 10, 66, 98, 
	0, 10, 76, 108, 0, 10, 73, 105, 
	0, 10, 67, 99, 0, 10, 105, 0, 
	10, 100, 0, 10, 100, 0, 10, 101, 
	0, 10, 110, 0, 10, 101, 116, 0, 
	10, 97, 116, 0, 10, 108, 0, 10, 
	101, 0, 10, 100, 0, 10, 65, 0, 
	10, 99, 0, 10, 99, 0, 10, 101, 
	0, 10, 115, 0, 10, 115, 0, 9, 
	10, 32, 37, 46, 61, 0, 10, 9, 
	32, 37, 41, 44, 46, 61, 46, 46, 
	9, 10, 13, 32, 10, 0, 10, 46, 
	0, 10, 46, 0, 9, 10, 13, 32, 
	0, 10, 0, 9, 10, 32, 37, 46, 
	80, 112, 0, 10, 9, 32, 37, 41, 
	44, 46, 80, 112, 46, 46, 9, 10, 
	13, 32, 10, 0, 10, 46, 0, 10, 
	46, 0, 9, 10, 13, 32, 0, 10, 
	0, 10, 82, 85, 114, 117, 0, 10, 
	73, 79, 105, 111, 0, 10, 86, 118, 
	0, 10, 65, 97, 0, 10, 84, 116, 
	0, 10, 69, 101, 0, 10, 84, 116, 
	0, 10, 69, 101, 0, 10, 67, 99, 
	0, 10, 84, 116, 0, 10, 69, 101, 
	0, 10, 68, 100, 0, 10, 66, 98, 
	0, 10, 76, 108, 0, 10, 73, 105, 
	0, 10, 67, 99, 0, 10, 97, 0, 
	10, 116, 0, 10, 105, 0, 10, 99, 
	37, 41, 44, 46, 37, 41, 44, 46, 
	9, 10, 13, 32, 37, 41, 44, 46, 
	9, 10, 13, 32, 37, 41, 44, 46, 
	10, 37, 41, 44, 46, 99, 101, 115, 
	115, 9, 32, 37, 46, 61, 0, 10, 
	46, 46, 9, 10, 13, 32, 10, 46, 
	46, 9, 10, 13, 32, 10, 0, 10, 
	37, 41, 44, 46, 37, 41, 44, 46, 
	9, 10, 13, 32, 37, 41, 44, 46, 
	9, 10, 13, 32, 37, 41, 44, 46, 
	10, 37, 41, 44, 46, 101, 116, 97, 
	116, 105, 99, 37, 41, 44, 46, 0, 
	10, 37, 41, 44, 37, 41, 44, 46, 
	37, 41, 44, 46, 9, 10, 13, 32, 
	37, 41, 44, 46, 9, 10, 13, 32, 
	37, 41, 44, 46, 10, 37, 41, 44, 
	46, 46, 46, 9, 10, 13, 32, 10, 
	9, 32, 95, 65, 90, 97, 122, 32, 
	59, 95, 48, 57, 65, 90, 97, 122, 
	59, 9, 10, 13, 32, 37, 9, 10, 
	13, 32, 37, 10, 0, 10, 13, 0, 
	10, 13, 10, 9, 10, 13, 32, 37, 
	40, 46, 9, 10, 13, 32, 37, 95, 
	101, 65, 90, 97, 122, 9, 10, 13, 
	32, 37, 95, 101, 65, 90, 97, 122, 
	10, 0, 10, 37, 9, 10, 13, 32, 
	37, 95, 65, 90, 97, 122, 32, 59, 
	95, 48, 57, 65, 90, 97, 122, 59, 
	9, 10, 13, 32, 37, 9, 10, 13, 
	32, 37, 10, 0, 10, 13, 0, 10, 
	13, 10, 32, 59, 95, 110, 48, 57, 
	65, 90, 97, 122, 32, 59, 95, 100, 
	48, 57, 65, 90, 97, 122, 10, 0, 
	10, 9, 32, 37, 46, 65, 67, 68, 
	71, 72, 83, 84, 0, 10, 46, 46, 
	9, 10, 13, 32, 10, 98, 99, 115, 
	116, 114, 97, 99, 116, 37, 41, 44, 
	46, 0, 10, 37, 41, 44, 0, 9, 
	10, 13, 32, 37, 46, 0, 10, 9, 
	32, 37, 41, 44, 46, 9, 10, 13, 
	32, 37, 46, 0, 10, 46, 46, 9, 
	10, 13, 32, 10, 9, 32, 37, 46, 
	65, 67, 68, 71, 72, 83, 84, 0, 
	10, 46, 46, 9, 10, 13, 32, 10, 
	111, 110, 115, 116, 97, 110, 116, 37, 
	41, 44, 46, 0, 10, 37, 41, 44, 
	0, 9, 10, 32, 37, 46, 65, 67, 
	68, 71, 72, 83, 84, 0, 10, 9, 
	32, 37, 41, 44, 46, 65, 67, 68, 
	71, 72, 83, 84, 46, 46, 9, 10, 
	13, 32, 10, 101, 112, 101, 110, 100, 
	101, 110, 101, 116, 65, 99, 99, 101, 
	115, 115, 9, 32, 37, 46, 61, 0, 
	10, 46, 46, 9, 10, 13, 32, 10, 
	9, 32, 37, 46, 80, 112, 0, 10, 
	46, 46, 9, 10, 13, 32, 10, 82, 
	85, 114, 117, 73, 79, 105, 111, 86, 
	118, 65, 97, 84, 116, 69, 101, 84, 
	116, 69, 101, 67, 99, 84, 116, 69, 
	101, 68, 100, 66, 98, 76, 108, 73, 
	105, 67, 99, 105, 100, 100, 101, 110, 
	101, 116, 65, 79, 99, 99, 101, 115, 
	115, 9, 32, 37, 46, 61, 0, 10, 
	46, 46, 9, 10, 13, 32, 10, 9, 
	32, 37, 46, 80, 112, 0, 10, 46, 
	46, 9, 10, 13, 32, 10, 82, 85, 
	114, 117, 73, 79, 105, 111, 86, 118, 
	65, 97, 84, 116, 69, 101, 84, 116, 
	69, 101, 67, 99, 84, 116, 69, 101, 
	68, 100, 66, 98, 76, 108, 73, 105, 
	67, 99, 98, 115, 101, 114, 118, 97, 
	98, 108, 101, 114, 97, 110, 115, 105, 
	0, 10, 46, 0, 10, 46, 0, 9, 
	10, 13, 32, 0, 10, 0, 10, 98, 
	99, 0, 10, 115, 0, 10, 116, 0, 
	10, 114, 0, 10, 97, 0, 10, 99, 
	0, 10, 116, 0, 10, 99, 0, 10, 
	101, 0, 10, 115, 0, 10, 115, 0, 
	9, 10, 32, 37, 46, 61, 0, 10, 
	9, 32, 37, 41, 44, 46, 61, 46, 
	46, 9, 10, 13, 32, 10, 9, 32, 
	37, 46, 80, 112, 0, 10, 46, 46, 
	9, 10, 13, 32, 10, 82, 85, 114, 
	117, 73, 79, 105, 111, 86, 118, 65, 
	97, 84, 116, 69, 101, 84, 116, 69, 
	101, 67, 99, 84, 116, 69, 101, 68, 
	100, 66, 98, 76, 108, 73, 105, 67, 
	99, 0, 10, 46, 0, 10, 46, 0, 
	9, 10, 13, 32, 0, 10, 0, 9, 
	10, 32, 37, 46, 80, 112, 0, 10, 
	9, 32, 37, 41, 44, 46, 80, 112, 
	46, 46, 9, 10, 13, 32, 10, 0, 
	10, 46, 0, 10, 46, 0, 9, 10, 
	13, 32, 0, 10, 0, 10, 82, 85, 
	114, 117, 0, 10, 73, 79, 105, 111, 
	0, 10, 86, 118, 0, 10, 65, 97, 
	0, 10, 84, 116, 0, 10, 69, 101, 
	0, 9, 10, 32, 37, 41, 44, 0, 
	10, 84, 116, 0, 10, 69, 101, 0, 
	10, 67, 99, 0, 10, 84, 116, 0, 
	10, 69, 101, 0, 10, 68, 100, 0, 
	10, 66, 98, 0, 10, 76, 108, 0, 
	10, 73, 105, 0, 10, 67, 99, 0, 
	10, 111, 0, 10, 110, 0, 10, 115, 
	0, 10, 116, 0, 10, 97, 0, 10, 
	110, 0, 10, 116, 0, 10, 101, 0, 
	10, 112, 0, 10, 101, 0, 10, 110, 
	0, 10, 100, 0, 10, 101, 0, 10, 
	110, 0, 10, 101, 0, 10, 116, 0, 
	10, 65, 0, 10, 99, 0, 10, 99, 
	0, 10, 101, 0, 10, 115, 0, 10, 
	115, 0, 9, 10, 32, 37, 46, 61, 
	0, 10, 9, 32, 37, 41, 44, 46, 
	61, 46, 46, 9, 10, 13, 32, 10, 
	0, 10, 46, 0, 10, 46, 0, 9, 
	10, 13, 32, 0, 10, 0, 9, 10, 
	32, 37, 46, 80, 112, 0, 10, 9, 
	32, 37, 41, 44, 46, 80, 112, 46, 
	46, 9, 10, 13, 32, 10, 0, 10, 
	46, 0, 10, 46, 0, 9, 10, 13, 
	32, 0, 10, 0, 10, 82, 85, 114, 
	117, 0, 10, 73, 79, 105, 111, 0, 
	10, 86, 118, 0, 10, 65, 97, 0, 
	10, 84, 116, 0, 10, 69, 101, 0, 
	10, 84, 116, 0, 10, 69, 101, 0, 
	10, 67, 99, 0, 10, 84, 116, 0, 
	10, 69, 101, 0, 10, 68, 100, 0, 
	10, 66, 98, 0, 10, 76, 108, 0, 
	10, 73, 105, 0, 10, 67, 99, 0, 
	10, 105, 0, 10, 100, 0, 10, 100, 
	0, 10, 101, 0, 10, 110, 0, 10, 
	101, 0, 10, 116, 0, 10, 65, 79, 
	0, 10, 99, 0, 10, 99, 0, 10, 
	101, 0, 10, 115, 0, 10, 115, 0, 
	9, 10, 32, 37, 46, 61, 0, 10, 
	9, 32, 37, 41, 44, 46, 61, 46, 
	46, 9, 10, 13, 32, 10, 0, 10, 
	46, 0, 10, 46, 0, 9, 10, 13, 
	32, 0, 10, 0, 9, 10, 32, 37, 
	46, 80, 112, 0, 10, 9, 32, 37, 
	41, 44, 46, 80, 112, 46, 46, 9, 
	10, 13, 32, 10, 0, 10, 46, 0, 
	10, 46, 0, 9, 10, 13, 32, 0, 
	10, 0, 10, 82, 85, 114, 117, 0, 
	10, 73, 79, 105, 111, 0, 10, 86, 
	118, 0, 10, 65, 97, 0, 10, 84, 
	116, 0, 10, 69, 101, 0, 10, 84, 
	116, 0, 10, 69, 101, 0, 10, 67, 
	99, 0, 10, 84, 116, 0, 10, 69, 
	101, 0, 10, 68, 100, 0, 10, 66, 
	98, 0, 10, 76, 108, 0, 10, 73, 
	105, 0, 10, 67, 99, 0, 10, 98, 
	0, 10, 115, 0, 10, 101, 0, 10, 
	114, 0, 10, 118, 0, 10, 97, 0, 
	10, 98, 0, 10, 108, 0, 10, 101, 
	0, 10, 114, 0, 10, 97, 0, 10, 
	110, 0, 10, 115, 0, 10, 105, 37, 
	41, 44, 46, 37, 41, 44, 46, 9, 
	10, 13, 32, 37, 41, 44, 46, 9, 
	10, 13, 32, 37, 41, 44, 46, 10, 
	37, 41, 44, 46, 46, 46, 9, 10, 
	13, 32, 10, 9, 10, 13, 32, 37, 
	41, 44, 46, 95, 101, 65, 90, 97, 
	122, 9, 10, 13, 32, 37, 41, 44, 
	46, 95, 101, 65, 90, 97, 122, 0, 
	10, 37, 9, 10, 13, 32, 37, 41, 
	44, 46, 95, 65, 90, 97, 122, 0, 
	10, 0, 10, 9, 10, 13, 32, 37, 
	41, 44, 46, 46, 46, 9, 10, 13, 
	32, 10, 0, 10, 46, 0, 10, 46, 
	0, 9, 10, 13, 32, 0, 10, 37, 
	41, 44, 46, 37, 41, 44, 46, 9, 
	10, 13, 32, 37, 41, 44, 46, 9, 
	10, 13, 32, 37, 41, 44, 46, 10, 
	37, 41, 44, 46, 99, 101, 115, 115, 
	9, 32, 37, 46, 61, 0, 10, 46, 
	46, 9, 10, 13, 32, 10, 111, 110, 
	115, 116, 97, 110, 116, 37, 41, 44, 
	46, 0, 10, 37, 41, 44, 37, 41, 
	44, 46, 37, 41, 44, 46, 9, 10, 
	13, 32, 37, 41, 44, 46, 9, 10, 
	13, 32, 37, 41, 44, 46, 10, 37, 
	41, 44, 46, 46, 46, 9, 10, 13, 
	32, 10, 0, 124, 0, 10, 118, 101, 
	110, 116, 115, 101, 116, 104, 111, 100, 
	115, 114, 111, 112, 101, 114, 116, 105, 
	101, 115, 10, 0, 10, 124, 0, 10, 
	46, 46, 9, 10, 13, 32, 10, 110, 
	118, 100, 9, 32, 37, 9, 10, 13, 
	32, 37, 102, 10, 9, 10, 13, 32, 
	37, 0, 124, 0, 10, 117, 110, 99, 
	116, 105, 111, 110, 9, 32, 37, 46, 
	91, 95, 103, 115, 65, 90, 97, 122, 
	0, 10, 46, 46, 9, 10, 13, 32, 
	10, 9, 10, 13, 32, 37, 40, 46, 
	59, 61, 95, 48, 57, 65, 90, 97, 
	122, 9, 10, 13, 32, 37, 40, 46, 
	59, 61, 10, 0, 10, 9, 10, 13, 
	32, 37, 40, 46, 59, 9, 10, 32, 
	37, 41, 44, 46, 61, 95, 65, 90, 
	97, 122, 0, 10, 9, 10, 13, 32, 
	37, 46, 59, 10, 0, 10, 46, 46, 
	9, 10, 13, 32, 10, 46, 46, 9, 
	10, 13, 32, 10, 10, 37, 41, 44, 
	46, 0, 10, 37, 41, 44, 0, 9, 
	10, 32, 37, 44, 61, 10, 37, 41, 
	44, 46, 10, 37, 41, 44, 46, 9, 
	10, 13, 32, 37, 41, 44, 46, 9, 
	10, 13, 32, 37, 41, 44, 46, 10, 
	37, 41, 44, 46, 9, 10, 32, 37, 
	41, 44, 46, 61, 95, 48, 57, 65, 
	90, 97, 122, 46, 46, 9, 10, 13, 
	32, 10, 10, 13, 9, 32, 37, 46, 
	95, 103, 115, 65, 90, 97, 122, 0, 
	10, 46, 46, 9, 10, 13, 32, 10, 
	9, 10, 13, 32, 37, 40, 46, 59, 
	95, 48, 57, 65, 90, 97, 122, 9, 
	10, 13, 32, 37, 40, 46, 59, 95, 
	101, 48, 57, 65, 90, 97, 122, 9, 
	10, 13, 32, 37, 40, 46, 59, 95, 
	116, 48, 57, 65, 90, 97, 122, 9, 
	10, 13, 32, 37, 40, 46, 59, 95, 
	48, 57, 65, 90, 97, 122, 46, 95, 
	65, 90, 97, 122, 9, 10, 13, 32, 
	37, 40, 46, 59, 95, 101, 48, 57, 
	65, 90, 97, 122, 9, 10, 13, 32, 
	37, 40, 46, 59, 95, 116, 48, 57, 
	65, 90, 97, 122, 9, 10, 13, 32, 
	37, 40, 46, 59, 95, 48, 57, 65, 
	90, 97, 122, 32, 37, 44, 46, 93, 
	95, 9, 10, 65, 90, 97, 122, 0, 
	10, 46, 46, 9, 10, 13, 32, 10, 
	32, 37, 44, 46, 93, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 10, 13, 32, 37, 40, 46, 
	59, 61, 95, 101, 48, 57, 65, 90, 
	97, 122, 9, 10, 13, 32, 37, 40, 
	46, 59, 61, 95, 116, 48, 57, 65, 
	90, 97, 122, 9, 10, 13, 32, 37, 
	40, 46, 59, 61, 95, 48, 57, 65, 
	90, 97, 122, 9, 10, 13, 32, 37, 
	40, 46, 59, 61, 95, 101, 48, 57, 
	65, 90, 97, 122, 9, 10, 13, 32, 
	37, 40, 46, 59, 61, 95, 116, 48, 
	57, 65, 90, 97, 122, 9, 10, 13, 
	32, 37, 40, 46, 59, 61, 95, 48, 
	57, 65, 90, 97, 122, 0, 9, 10, 
	13, 32, 37, 99, 10, 9, 10, 13, 
	32, 37, 0, 124, 0, 10, 108, 97, 
	115, 115, 100, 101, 102, 99, 108, 97, 
	115, 115, 100, 101, 102, 9, 32, 37, 
	46, 95, 65, 90, 97, 122, 0, 10, 
	46, 46, 9, 10, 13, 32, 10, 9, 
	10, 13, 32, 37, 40, 46, 60, 95, 
	48, 57, 65, 90, 97, 122, 9, 10, 
	13, 32, 37, 40, 46, 60, 10, 0, 
	10, 41, 9, 10, 13, 32, 37, 46, 
	60, 0, 10, 46, 46, 9, 10, 13, 
	32, 10, 9, 32, 37, 46, 95, 65, 
	90, 97, 122, 0, 10, 46, 46, 9, 
	10, 13, 32, 10, 9, 10, 13, 32, 
	37, 38, 46, 95, 48, 57, 65, 90, 
	97, 122, 9, 10, 13, 32, 37, 38, 
	46, 0, 10, 9, 32, 37, 46, 95, 
	65, 90, 97, 122, 0, 10, 46, 46, 
	9, 10, 13, 32, 10, 9, 10, 13, 
	32, 37, 38, 46, 95, 48, 57, 65, 
	90, 97, 122, 9, 10, 13, 32, 37, 
	46, 0, 10, 46, 46, 9, 10, 13, 
	32, 10, 46, 46, 9, 10, 13, 32, 
	10, 46, 46, 9, 10, 13, 32, 10, 
	37, 0, 9, 10, 13, 32, 37, 46, 
	95, 100, 123, 125, 65, 90, 97, 122, 
	9, 32, 10, 0, 10, 46, 46, 95, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	46, 61, 95, 48, 57, 65, 90, 97, 
	122, 46, 95, 105, 48, 57, 65, 90, 
	97, 122, 46, 95, 115, 48, 57, 65, 
	90, 97, 122, 46, 95, 112, 48, 57, 
	65, 90, 97, 122, 46, 95, 48, 57, 
	65, 90, 97, 122, 46, 95, 100, 48, 
	57, 65, 90, 97, 122, 46, 95, 101, 
	48, 57, 65, 90, 97, 122, 46, 95, 
	112, 48, 57, 65, 90, 97, 122, 46, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	46, 95, 101, 48, 57, 65, 90, 97, 
	122, 46, 95, 99, 48, 57, 65, 90, 
	97, 122, 46, 95, 97, 48, 57, 65, 
	90, 98, 122, 46, 95, 116, 48, 57, 
	65, 90, 97, 122, 46, 95, 101, 48, 
	57, 65, 90, 97, 122, 46, 95, 100, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	40, 46, 59, 95, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 13, 32, 37, 
	101, 102, 9, 32, 9, 10, 13, 32, 
	9, 10, 13, 32, 9, 10, 13, 32, 
	37, 46, 59, 9, 10, 13, 32, 37, 
	46, 9, 10, 13, 32, 37, 46, 9, 
	10, 13, 32, 0, 9, 10, 13, 32, 
	37, 0, 9, 10, 13, 32, 37, 10, 
	0, 9, 10, 13, 32, 37, 58, 83, 
	115, 0, 13, 32, 37, 58, 9, 10, 
	9, 32, 37, 9, 10, 13, 32, 71, 
	79, 80, 82, 103, 111, 112, 114, 10, 
	13, 0, 13, 32, 37, 58, 69, 101, 
	9, 10, 0, 13, 32, 37, 58, 69, 
	101, 9, 10, 0, 13, 32, 37, 58, 
	9, 10, 9, 32, 37, 9, 32, 37, 
	9, 32, 37, 0, 9, 10, 32, 101, 
	9, 10, 13, 32, 101, 102, 9, 10, 
	13, 32, 59, 101, 102, 9, 32, 37, 
	41, 44, 46, 9, 32, 95, 65, 90, 
	97, 122, 32, 59, 95, 48, 57, 65, 
	90, 97, 122, 9, 10, 13, 32, 37, 
	9, 10, 13, 32, 37, 46, 101, 109, 
	112, 9, 32, 37, 101, 109, 112, 0, 
	10, 9, 32, 59, 0
};

static const char _MFileScanner_single_lengths[] = {
	0, 7, 1, 5, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 2, 1, 4, 1, 
	1, 3, 1, 4, 3, 2, 2, 3, 
	3, 4, 1, 7, 1, 2, 7, 7, 
	7, 1, 8, 1, 2, 2, 8, 8, 
	8, 7, 1, 2, 1, 1, 4, 1, 
	6, 2, 1, 1, 4, 1, 7, 7, 
	7, 1, 7, 1, 2, 7, 7, 7, 
	1, 1, 8, 8, 8, 8, 8, 8, 
	8, 4, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 2, 
	7, 6, 5, 2, 1, 1, 6, 12, 
	5, 2, 6, 3, 12, 1, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 2, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	1, 1, 4, 3, 4, 1, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 2, 2, 1, 2, 2, 1, 
	1, 4, 3, 4, 1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 4, 
	1, 2, 4, 2, 2, 2, 2, 2, 
	1, 2, 2, 2, 2, 2, 2, 1, 
	2, 2, 1, 1, 4, 3, 4, 1, 
	2, 2, 2, 1, 2, 2, 2, 2, 
	2, 2, 3, 4, 1, 1, 1, 2, 
	2, 2, 2, 3, 3, 3, 3, 5, 
	4, 1, 5, 5, 2, 1, 1, 3, 
	1, 1, 1, 1, 1, 1, 1, 6, 
	2, 1, 1, 4, 1, 2, 5, 3, 
	3, 6, 2, 6, 1, 1, 1, 7, 
	1, 2, 8, 2, 1, 1, 4, 1, 
	2, 1, 1, 1, 1, 1, 1, 4, 
	5, 3, 2, 6, 2, 8, 2, 1, 
	1, 4, 1, 2, 1, 1, 1, 1, 
	1, 1, 4, 5, 10, 2, 10, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 1, 1, 4, 
	1, 6, 2, 1, 1, 4, 1, 4, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 4, 5, 4, 4, 
	8, 8, 5, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	1, 1, 4, 1, 6, 2, 1, 1, 
	4, 1, 4, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 4, 5, 
	4, 4, 8, 8, 5, 3, 3, 5, 
	2, 4, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 7, 2, 7, 1, 
	1, 4, 1, 6, 2, 1, 1, 4, 
	1, 4, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 5, 2, 8, 2, 8, 
	1, 1, 4, 1, 3, 3, 5, 2, 
	6, 6, 4, 4, 4, 4, 7, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 3, 3, 3, 3, 3, 3, 3, 
	3, 7, 2, 7, 1, 1, 4, 1, 
	3, 3, 5, 2, 8, 2, 8, 1, 
	1, 4, 1, 3, 3, 5, 2, 6, 
	6, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 3, 
	3, 3, 3, 3, 4, 4, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 7, 
	2, 7, 1, 1, 4, 1, 3, 3, 
	5, 2, 8, 2, 8, 1, 1, 4, 
	1, 3, 3, 5, 2, 6, 6, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 3, 3, 3, 
	3, 4, 4, 8, 8, 5, 1, 1, 
	1, 1, 5, 2, 1, 1, 4, 1, 
	1, 1, 4, 1, 2, 4, 4, 8, 
	8, 5, 2, 1, 1, 1, 1, 4, 
	5, 4, 4, 8, 8, 5, 1, 1, 
	4, 1, 3, 3, 1, 5, 5, 1, 
	3, 3, 1, 7, 7, 7, 1, 3, 
	6, 3, 1, 5, 5, 1, 3, 3, 
	1, 4, 4, 1, 2, 11, 2, 1, 
	1, 4, 1, 2, 1, 1, 1, 1, 
	1, 1, 4, 5, 7, 2, 6, 6, 
	2, 1, 1, 4, 1, 11, 2, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	1, 1, 4, 5, 13, 2, 13, 1, 
	1, 4, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 1, 1, 4, 1, 
	6, 2, 1, 1, 4, 1, 4, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 5, 2, 1, 1, 4, 
	1, 6, 2, 1, 1, 4, 1, 4, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 3, 5, 
	2, 4, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 7, 2, 7, 1, 
	1, 4, 1, 6, 2, 1, 1, 4, 
	1, 4, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 5, 2, 8, 2, 8, 
	1, 1, 4, 1, 3, 3, 5, 2, 
	6, 6, 4, 4, 4, 4, 7, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 7, 
	2, 7, 1, 1, 4, 1, 3, 3, 
	5, 2, 8, 2, 8, 1, 1, 4, 
	1, 3, 3, 5, 2, 6, 6, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 3, 3, 3, 
	3, 3, 3, 3, 4, 3, 3, 3, 
	3, 3, 7, 2, 7, 1, 1, 4, 
	1, 3, 3, 5, 2, 8, 2, 8, 
	1, 1, 4, 1, 3, 3, 5, 2, 
	6, 6, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 4, 4, 
	8, 8, 5, 1, 1, 4, 1, 10, 
	10, 3, 9, 2, 2, 8, 1, 1, 
	4, 1, 3, 3, 5, 2, 4, 4, 
	8, 8, 5, 1, 1, 1, 1, 5, 
	2, 1, 1, 4, 1, 1, 1, 1, 
	1, 1, 1, 1, 4, 5, 4, 4, 
	8, 8, 5, 1, 1, 4, 1, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 2, 
	1, 1, 4, 1, 2, 1, 3, 6, 
	1, 5, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 8, 2, 1, 1, 4, 
	1, 10, 9, 1, 2, 8, 9, 2, 
	7, 1, 2, 1, 1, 4, 1, 1, 
	1, 4, 1, 5, 5, 7, 5, 5, 
	8, 8, 5, 9, 1, 1, 4, 1, 
	2, 7, 2, 1, 1, 4, 1, 9, 
	10, 10, 9, 2, 10, 10, 9, 6, 
	2, 1, 1, 4, 1, 6, 3, 11, 
	11, 10, 11, 11, 10, 1, 6, 1, 
	5, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 1, 1, 4, 1, 
	9, 8, 1, 2, 1, 7, 2, 1, 
	1, 4, 1, 5, 2, 1, 1, 4, 
	1, 8, 7, 2, 5, 2, 1, 1, 
	4, 1, 8, 6, 2, 1, 1, 4, 
	1, 1, 1, 4, 1, 1, 1, 4, 
	1, 0, 1, 11, 2, 1, 2, 1, 
	2, 5, 3, 3, 3, 2, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	6, 8, 2, 4, 4, 7, 6, 6, 
	4, 6, 6, 1, 9, 5, 3, 12, 
	2, 7, 7, 5, 3, 3, 3, 0, 
	5, 6, 7, 0, 6, 3, 3, 5, 
	9, 6, 2, 3, 0, 0, 0, 0
};

static const char _MFileScanner_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 0, 0, 0, 0, 0, 2, 4, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 2, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 2, 0, 0, 
	2, 3, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 2, 
	2, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 2, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 2, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 2, 3, 3, 3, 3, 
	0, 0, 0, 0, 0, 4, 0, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	0, 3, 0, 0, 2, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 2, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};

static const short _MFileScanner_index_offsets[] = {
	0, 0, 8, 10, 16, 18, 20, 22, 
	24, 26, 28, 30, 32, 34, 36, 38, 
	40, 42, 44, 46, 49, 52, 54, 59, 
	61, 65, 69, 71, 76, 80, 83, 86, 
	90, 94, 99, 101, 109, 111, 114, 122, 
	130, 138, 140, 149, 151, 154, 157, 166, 
	175, 184, 192, 194, 197, 199, 201, 206, 
	208, 215, 218, 220, 222, 227, 229, 237, 
	245, 253, 255, 263, 265, 268, 276, 284, 
	292, 294, 296, 305, 314, 323, 332, 341, 
	350, 359, 365, 369, 373, 377, 381, 385, 
	389, 393, 397, 401, 405, 409, 413, 417, 
	421, 425, 429, 433, 437, 441, 445, 449, 
	453, 457, 461, 465, 469, 473, 477, 481, 
	484, 494, 501, 507, 510, 512, 514, 523, 
	540, 546, 549, 556, 560, 573, 575, 578, 
	581, 584, 587, 590, 593, 596, 599, 601, 
	604, 607, 610, 613, 616, 619, 621, 624, 
	627, 629, 633, 641, 645, 650, 652, 655, 
	658, 661, 664, 667, 670, 673, 675, 678, 
	681, 684, 687, 690, 693, 695, 698, 701, 
	703, 707, 715, 719, 724, 726, 729, 732, 
	735, 738, 741, 744, 747, 750, 753, 757, 
	762, 764, 767, 772, 775, 778, 781, 784, 
	787, 789, 792, 795, 798, 801, 804, 807, 
	809, 812, 815, 817, 821, 829, 833, 838, 
	840, 843, 846, 849, 851, 854, 857, 860, 
	863, 866, 869, 873, 878, 880, 882, 884, 
	887, 890, 893, 896, 900, 904, 908, 912, 
	918, 923, 925, 931, 937, 940, 942, 944, 
	948, 950, 952, 954, 956, 958, 960, 962, 
	969, 972, 974, 976, 981, 983, 986, 992, 
	996, 1000, 1007, 1010, 1017, 1019, 1021, 1023, 
	1031, 1033, 1036, 1045, 1048, 1050, 1052, 1057, 
	1059, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 
	1079, 1085, 1089, 1092, 1099, 1102, 1111, 1114, 
	1116, 1118, 1123, 1125, 1128, 1130, 1132, 1134, 
	1136, 1138, 1140, 1145, 1151, 1162, 1165, 1176, 
	1178, 1180, 1185, 1187, 1189, 1191, 1193, 1195, 
	1197, 1199, 1201, 1203, 1209, 1212, 1214, 1216, 
	1221, 1223, 1230, 1233, 1235, 1237, 1242, 1244, 
	1249, 1254, 1257, 1260, 1263, 1266, 1269, 1272, 
	1275, 1278, 1281, 1284, 1287, 1290, 1293, 1296, 
	1298, 1300, 1302, 1304, 1306, 1311, 1317, 1322, 
	1327, 1336, 1345, 1351, 1354, 1357, 1359, 1361, 
	1363, 1365, 1367, 1369, 1371, 1373, 1375, 1381, 
	1384, 1386, 1388, 1393, 1395, 1402, 1405, 1407, 
	1409, 1414, 1416, 1421, 1426, 1429, 1432, 1435, 
	1438, 1441, 1444, 1447, 1450, 1453, 1456, 1459, 
	1462, 1465, 1468, 1470, 1472, 1474, 1476, 1481, 
	1487, 1492, 1497, 1506, 1515, 1521, 1525, 1529, 
	1535, 1538, 1543, 1547, 1551, 1555, 1559, 1563, 
	1567, 1571, 1575, 1579, 1583, 1591, 1594, 1602, 
	1604, 1606, 1611, 1613, 1620, 1623, 1625, 1627, 
	1632, 1634, 1639, 1644, 1647, 1650, 1653, 1656, 
	1659, 1662, 1665, 1668, 1671, 1674, 1677, 1680, 
	1683, 1686, 1690, 1694, 1700, 1703, 1712, 1715, 
	1724, 1726, 1728, 1733, 1735, 1739, 1743, 1749, 
	1752, 1759, 1766, 1771, 1776, 1781, 1786, 1794, 
	1799, 1804, 1809, 1814, 1819, 1824, 1829, 1834, 
	1839, 1844, 1848, 1852, 1856, 1860, 1864, 1868, 
	1872, 1876, 1884, 1887, 1895, 1897, 1899, 1904, 
	1906, 1910, 1914, 1920, 1923, 1932, 1935, 1944, 
	1946, 1948, 1953, 1955, 1959, 1963, 1969, 1972, 
	1979, 1986, 1991, 1996, 2001, 2006, 2011, 2016, 
	2021, 2026, 2031, 2036, 2041, 2046, 2051, 2056, 
	2060, 2064, 2068, 2072, 2076, 2081, 2086, 2090, 
	2094, 2098, 2102, 2106, 2110, 2114, 2118, 2122, 
	2130, 2133, 2141, 2143, 2145, 2150, 2152, 2156, 
	2160, 2166, 2169, 2178, 2181, 2190, 2192, 2194, 
	2199, 2201, 2205, 2209, 2215, 2218, 2225, 2232, 
	2237, 2242, 2247, 2252, 2257, 2262, 2267, 2272, 
	2277, 2282, 2287, 2292, 2297, 2302, 2306, 2310, 
	2314, 2318, 2323, 2328, 2337, 2346, 2352, 2354, 
	2356, 2358, 2360, 2366, 2369, 2371, 2373, 2378, 
	2380, 2382, 2384, 2389, 2391, 2394, 2399, 2404, 
	2413, 2422, 2428, 2431, 2433, 2435, 2437, 2439, 
	2444, 2450, 2455, 2460, 2469, 2478, 2484, 2486, 
	2488, 2493, 2495, 2501, 2508, 2510, 2516, 2522, 
	2524, 2528, 2532, 2534, 2542, 2552, 2562, 2564, 
	2568, 2577, 2584, 2586, 2592, 2598, 2600, 2604, 
	2608, 2610, 2618, 2626, 2628, 2631, 2643, 2646, 
	2648, 2650, 2655, 2657, 2660, 2662, 2664, 2666, 
	2668, 2670, 2672, 2677, 2683, 2691, 2694, 2701, 
	2708, 2711, 2713, 2715, 2720, 2722, 2734, 2737, 
	2739, 2741, 2746, 2748, 2750, 2752, 2754, 2756, 
	2758, 2760, 2762, 2767, 2773, 2787, 2790, 2804, 
	2806, 2808, 2813, 2815, 2817, 2819, 2821, 2823, 
	2825, 2827, 2829, 2831, 2833, 2835, 2837, 2839, 
	2841, 2843, 2845, 2851, 2854, 2856, 2858, 2863, 
	2865, 2872, 2875, 2877, 2879, 2884, 2886, 2891, 
	2896, 2899, 2902, 2905, 2908, 2911, 2914, 2917, 
	2920, 2923, 2926, 2929, 2932, 2935, 2938, 2940, 
	2942, 2944, 2946, 2948, 2950, 2952, 2955, 2957, 
	2959, 2961, 2963, 2965, 2971, 2974, 2976, 2978, 
	2983, 2985, 2992, 2995, 2997, 2999, 3004, 3006, 
	3011, 3016, 3019, 3022, 3025, 3028, 3031, 3034, 
	3037, 3040, 3043, 3046, 3049, 3052, 3055, 3058, 
	3060, 3062, 3064, 3066, 3068, 3070, 3072, 3074, 
	3076, 3078, 3080, 3082, 3084, 3086, 3090, 3094, 
	3100, 3103, 3108, 3112, 3116, 3120, 3124, 3128, 
	3132, 3136, 3140, 3144, 3148, 3156, 3159, 3167, 
	3169, 3171, 3176, 3178, 3185, 3188, 3190, 3192, 
	3197, 3199, 3204, 3209, 3212, 3215, 3218, 3221, 
	3224, 3227, 3230, 3233, 3236, 3239, 3242, 3245, 
	3248, 3251, 3255, 3259, 3265, 3268, 3277, 3280, 
	3289, 3291, 3293, 3298, 3300, 3304, 3308, 3314, 
	3317, 3324, 3331, 3336, 3341, 3346, 3351, 3359, 
	3364, 3369, 3374, 3379, 3384, 3389, 3394, 3399, 
	3404, 3409, 3413, 3417, 3421, 3425, 3429, 3433, 
	3437, 3441, 3445, 3449, 3453, 3457, 3461, 3465, 
	3469, 3473, 3477, 3481, 3485, 3489, 3493, 3497, 
	3505, 3508, 3516, 3518, 3520, 3525, 3527, 3531, 
	3535, 3541, 3544, 3553, 3556, 3565, 3567, 3569, 
	3574, 3576, 3580, 3584, 3590, 3593, 3600, 3607, 
	3612, 3617, 3622, 3627, 3632, 3637, 3642, 3647, 
	3652, 3657, 3662, 3667, 3672, 3677, 3681, 3685, 
	3689, 3693, 3697, 3701, 3705, 3710, 3714, 3718, 
	3722, 3726, 3730, 3738, 3741, 3749, 3751, 3753, 
	3758, 3760, 3764, 3768, 3774, 3777, 3786, 3789, 
	3798, 3800, 3802, 3807, 3809, 3813, 3817, 3823, 
	3826, 3833, 3840, 3845, 3850, 3855, 3860, 3865, 
	3870, 3875, 3880, 3885, 3890, 3895, 3900, 3905, 
	3910, 3914, 3918, 3922, 3926, 3930, 3934, 3938, 
	3942, 3946, 3950, 3954, 3958, 3962, 3966, 3971, 
	3976, 3985, 3994, 4000, 4002, 4004, 4009, 4011, 
	4024, 4037, 4041, 4053, 4056, 4059, 4068, 4070, 
	4072, 4077, 4079, 4083, 4087, 4093, 4096, 4101, 
	4106, 4115, 4124, 4130, 4132, 4134, 4136, 4138, 
	4144, 4147, 4149, 4151, 4156, 4158, 4160, 4162, 
	4164, 4166, 4168, 4170, 4172, 4177, 4183, 4188, 
	4193, 4202, 4211, 4217, 4219, 4221, 4226, 4228, 
	4231, 4234, 4236, 4238, 4240, 4242, 4244, 4246, 
	4248, 4250, 4252, 4254, 4256, 4258, 4260, 4262, 
	4264, 4266, 4268, 4270, 4272, 4274, 4276, 4280, 
	4283, 4285, 4287, 4292, 4294, 4297, 4299, 4303, 
	4310, 4312, 4318, 4321, 4324, 4326, 4328, 4330, 
	4332, 4334, 4336, 4338, 4349, 4352, 4354, 4356, 
	4361, 4363, 4377, 4387, 4389, 4392, 4401, 4413, 
	4416, 4424, 4426, 4429, 4431, 4433, 4438, 4440, 
	4442, 4444, 4449, 4451, 4457, 4463, 4471, 4477, 
	4483, 4492, 4501, 4507, 4520, 4522, 4524, 4529, 
	4531, 4534, 4544, 4547, 4549, 4551, 4556, 4558, 
	4571, 4585, 4599, 4612, 4617, 4631, 4645, 4658, 
	4668, 4671, 4673, 4675, 4680, 4682, 4693, 4697, 
	4712, 4727, 4741, 4756, 4771, 4785, 4787, 4794, 
	4796, 4802, 4805, 4808, 4810, 4812, 4814, 4816, 
	4818, 4820, 4822, 4824, 4826, 4828, 4830, 4832, 
	4834, 4836, 4838, 4846, 4849, 4851, 4853, 4858, 
	4860, 4873, 4882, 4884, 4887, 4889, 4897, 4900, 
	4902, 4904, 4909, 4911, 4919, 4922, 4924, 4926, 
	4931, 4933, 4945, 4953, 4956, 4964, 4967, 4969, 
	4971, 4976, 4978, 4990, 4997, 5000, 5002, 5004, 
	5009, 5011, 5013, 5015, 5020, 5022, 5024, 5026, 
	5031, 5033, 5034, 5036, 5050, 5053, 5055, 5058, 
	5060, 5066, 5075, 5082, 5089, 5096, 5102, 5109, 
	5116, 5123, 5130, 5137, 5144, 5151, 5158, 5165, 
	5172, 5182, 5191, 5194, 5199, 5204, 5212, 5219, 
	5226, 5231, 5238, 5245, 5247, 5257, 5264, 5268, 
	5281, 5284, 5293, 5302, 5309, 5313, 5317, 5321, 
	5322, 5328, 5335, 5343, 5344, 5351, 5357, 5364, 
	5370, 5380, 5387, 5390, 5394, 5395, 5396, 5397
};

static const short _MFileScanner_indicies[] = {
	1, 2, 3, 4, 5, 6, 7, 0, 
	2, 8, 4, 2, 3, 4, 5, 8, 
	2, 5, 9, 0, 10, 0, 11, 0, 
	12, 0, 13, 0, 14, 0, 15, 0, 
	16, 0, 17, 0, 18, 0, 19, 0, 
	20, 0, 21, 0, 22, 0, 24, 25, 
	23, 26, 28, 27, 29, 26, 29, 30, 
	31, 29, 26, 30, 26, 33, 33, 33, 
	32, 35, 35, 36, 34, 34, 37, 38, 
	38, 39, 40, 32, 39, 39, 41, 32, 
	32, 43, 42, 32, 45, 44, 46, 46, 
	47, 32, 47, 47, 48, 32, 48, 49, 
	50, 48, 32, 49, 32, 8, 52, 53, 
	54, 52, 55, 56, 51, 53, 8, 8, 
	58, 57, 8, 52, 53, 54, 52, 55, 
	59, 51, 8, 52, 53, 54, 52, 55, 
	60, 51, 8, 61, 53, 54, 61, 55, 
	60, 51, 53, 62, 8, 63, 64, 65, 
	63, 66, 67, 68, 51, 64, 8, 8, 
	70, 69, 8, 72, 71, 8, 52, 53, 
	54, 52, 55, 56, 73, 51, 8, 52, 
	53, 54, 52, 55, 56, 74, 51, 8, 
	75, 76, 77, 75, 78, 79, 80, 51, 
	75, 76, 77, 75, 78, 82, 83, 81, 
	76, 81, 81, 85, 84, 86, 81, 87, 
	81, 87, 88, 89, 87, 81, 88, 81, 
	83, 76, 77, 83, 90, 91, 81, 81, 
	93, 92, 94, 81, 95, 81, 95, 96, 
	97, 95, 81, 96, 81, 8, 52, 53, 
	54, 52, 55, 98, 51, 8, 52, 53, 
	54, 52, 55, 99, 51, 8, 100, 101, 
	102, 100, 55, 60, 51, 101, 8, 8, 
	103, 53, 104, 103, 105, 106, 51, 53, 
	8, 8, 108, 107, 8, 52, 53, 54, 
	52, 55, 109, 51, 8, 52, 53, 54, 
	52, 55, 110, 51, 8, 111, 112, 113, 
	111, 55, 60, 51, 112, 62, 112, 8, 
	8, 52, 53, 54, 52, 55, 56, 114, 
	51, 8, 52, 53, 54, 52, 55, 56, 
	115, 51, 8, 52, 53, 54, 52, 55, 
	56, 116, 51, 8, 52, 53, 54, 52, 
	55, 56, 117, 51, 8, 52, 53, 54, 
	52, 55, 56, 118, 51, 8, 52, 53, 
	54, 52, 55, 56, 119, 51, 8, 52, 
	53, 54, 52, 55, 56, 120, 51, 8, 
	8, 121, 8, 8, 51, 8, 122, 70, 
	69, 8, 72, 123, 71, 8, 72, 124, 
	71, 8, 72, 125, 71, 8, 72, 126, 
	71, 8, 72, 127, 71, 8, 72, 128, 
	71, 8, 72, 129, 71, 8, 72, 130, 
	71, 8, 72, 131, 71, 8, 72, 132, 
	71, 8, 72, 133, 71, 8, 72, 134, 
	71, 8, 72, 135, 71, 8, 72, 136, 
	71, 8, 72, 137, 71, 8, 72, 138, 
	71, 8, 72, 139, 71, 8, 72, 140, 
	71, 8, 72, 141, 71, 8, 72, 142, 
	71, 8, 72, 143, 71, 8, 72, 144, 
	71, 8, 72, 145, 71, 8, 72, 146, 
	71, 8, 72, 147, 71, 8, 72, 148, 
	71, 8, 72, 149, 71, 8, 72, 150, 
	71, 8, 151, 71, 152, 154, 155, 156, 
	154, 157, 152, 158, 158, 153, 152, 159, 
	160, 161, 159, 152, 153, 159, 160, 161, 
	159, 152, 162, 152, 160, 162, 160, 152, 
	155, 152, 152, 159, 160, 161, 159, 152, 
	158, 158, 153, 152, 163, 160, 161, 163, 
	164, 165, 165, 166, 165, 165, 165, 165, 
	165, 165, 165, 153, 167, 160, 161, 167, 
	168, 162, 152, 170, 169, 152, 167, 160, 
	161, 167, 168, 153, 172, 172, 173, 171, 
	175, 176, 177, 175, 178, 179, 180, 181, 
	178, 179, 180, 181, 174, 176, 174, 182, 
	182, 174, 183, 183, 174, 184, 184, 174, 
	185, 185, 174, 186, 186, 174, 187, 187, 
	174, 188, 188, 174, 189, 189, 174, 190, 
	174, 191, 191, 174, 192, 192, 174, 193, 
	193, 174, 194, 194, 174, 195, 195, 174, 
	196, 196, 174, 197, 174, 198, 198, 174, 
	199, 199, 174, 200, 174, 201, 201, 201, 
	174, 202, 202, 204, 203, 203, 203, 203, 
	174, 205, 205, 206, 174, 206, 207, 208, 
	206, 174, 207, 174, 209, 209, 174, 210, 
	210, 174, 211, 211, 174, 212, 212, 174, 
	213, 213, 174, 214, 214, 174, 215, 215, 
	174, 216, 174, 217, 217, 174, 218, 218, 
	174, 219, 219, 174, 220, 220, 174, 221, 
	221, 174, 222, 222, 174, 223, 174, 224, 
	224, 174, 225, 225, 174, 226, 174, 227, 
	227, 227, 174, 228, 228, 230, 229, 229, 
	229, 229, 174, 231, 231, 232, 174, 232, 
	233, 234, 232, 174, 233, 174, 235, 235, 
	174, 236, 236, 174, 237, 237, 174, 238, 
	238, 174, 239, 239, 174, 240, 240, 174, 
	241, 241, 174, 242, 242, 174, 243, 243, 
	174, 243, 243, 244, 174, 244, 245, 246, 
	244, 174, 245, 174, 247, 247, 174, 248, 
	249, 248, 249, 174, 250, 250, 174, 251, 
	251, 174, 252, 252, 174, 253, 253, 174, 
	254, 254, 174, 255, 174, 256, 256, 174, 
	257, 257, 174, 258, 258, 174, 259, 259, 
	174, 260, 260, 174, 261, 261, 174, 262, 
	174, 263, 263, 174, 264, 264, 174, 265, 
	174, 266, 266, 266, 174, 267, 267, 269, 
	268, 268, 268, 268, 174, 270, 270, 271, 
	174, 271, 272, 273, 271, 174, 272, 174, 
	274, 274, 174, 275, 275, 174, 276, 276, 
	174, 277, 174, 278, 278, 174, 279, 279, 
	174, 280, 280, 174, 281, 281, 174, 282, 
	282, 174, 283, 283, 174, 283, 283, 284, 
	174, 284, 285, 286, 284, 174, 285, 174, 
	287, 8, 289, 288, 291, 291, 290, 292, 
	292, 290, 293, 293, 290, 294, 294, 290, 
	295, 295, 296, 8, 8, 298, 299, 297, 
	8, 298, 300, 297, 8, 298, 301, 297, 
	302, 303, 304, 302, 305, 8, 302, 303, 
	304, 302, 8, 303, 8, 302, 303, 304, 
	302, 302, 8, 306, 308, 309, 310, 308, 
	307, 306, 311, 307, 309, 306, 312, 8, 
	312, 312, 314, 313, 315, 313, 316, 313, 
	317, 313, 318, 313, 319, 313, 320, 313, 
	321, 313, 313, 313, 313, 322, 323, 322, 
	321, 313, 324, 322, 325, 313, 326, 313, 
	326, 327, 328, 326, 313, 327, 313, 8, 
	330, 329, 8, 331, 330, 331, 332, 329, 
	8, 330, 333, 329, 8, 330, 334, 329, 
	8, 334, 335, 336, 334, 334, 329, 8, 
	335, 329, 337, 338, 339, 337, 340, 341, 
	8, 338, 8, 342, 8, 343, 8, 344, 
	345, 346, 344, 347, 348, 349, 8, 345, 
	8, 8, 351, 350, 348, 348, 352, 353, 
	354, 355, 356, 357, 8, 8, 359, 358, 
	360, 8, 361, 8, 361, 362, 363, 361, 
	8, 362, 8, 364, 365, 8, 366, 8, 
	367, 8, 368, 8, 369, 8, 370, 8, 
	371, 8, 372, 373, 374, 375, 371, 371, 
	377, 372, 378, 379, 376, 8, 381, 382, 
	380, 8, 383, 380, 384, 384, 385, 373, 
	374, 386, 8, 345, 346, 8, 374, 374, 
	387, 388, 389, 355, 356, 390, 8, 8, 
	392, 391, 393, 8, 394, 8, 394, 395, 
	396, 394, 8, 395, 8, 397, 365, 8, 
	398, 8, 399, 8, 400, 8, 401, 8, 
	402, 8, 403, 8, 404, 373, 374, 405, 
	403, 403, 407, 404, 378, 379, 406, 8, 
	379, 383, 379, 408, 409, 410, 411, 412, 
	413, 380, 8, 415, 414, 416, 416, 408, 
	373, 374, 417, 389, 355, 356, 390, 8, 
	418, 8, 419, 8, 419, 420, 421, 419, 
	8, 420, 8, 422, 8, 423, 8, 424, 
	8, 425, 8, 426, 8, 427, 8, 428, 
	8, 429, 8, 429, 429, 430, 431, 432, 
	8, 8, 434, 433, 435, 8, 436, 8, 
	436, 437, 438, 436, 8, 437, 8, 432, 
	432, 439, 440, 441, 441, 8, 8, 443, 
	442, 444, 8, 445, 8, 445, 446, 447, 
	445, 8, 446, 8, 448, 449, 448, 449, 
	8, 450, 451, 450, 451, 8, 452, 452, 
	8, 453, 453, 8, 454, 454, 8, 455, 
	455, 8, 456, 456, 8, 457, 457, 8, 
	458, 458, 8, 459, 459, 8, 460, 460, 
	8, 461, 461, 8, 462, 462, 8, 463, 
	463, 8, 464, 464, 8, 465, 465, 8, 
	466, 8, 467, 8, 468, 8, 469, 8, 
	470, 8, 471, 373, 374, 472, 470, 470, 
	474, 471, 378, 379, 473, 471, 373, 374, 
	475, 470, 471, 373, 374, 476, 470, 477, 
	478, 479, 477, 471, 373, 374, 476, 470, 
	477, 478, 479, 477, 471, 373, 374, 472, 
	470, 478, 471, 373, 374, 472, 470, 480, 
	481, 8, 482, 483, 8, 484, 8, 485, 
	8, 470, 8, 486, 8, 487, 8, 488, 
	8, 489, 8, 490, 8, 491, 8, 491, 
	491, 492, 493, 494, 8, 8, 496, 495, 
	497, 8, 498, 8, 498, 499, 500, 498, 
	8, 499, 8, 494, 494, 501, 502, 503, 
	503, 8, 8, 505, 504, 506, 8, 507, 
	8, 507, 508, 509, 507, 8, 508, 8, 
	510, 511, 510, 511, 8, 512, 513, 512, 
	513, 8, 514, 514, 8, 515, 515, 8, 
	516, 516, 8, 517, 517, 8, 518, 518, 
	8, 519, 519, 8, 520, 520, 8, 521, 
	521, 8, 522, 522, 8, 523, 523, 8, 
	524, 524, 8, 525, 525, 8, 526, 526, 
	8, 527, 527, 8, 528, 8, 529, 8, 
	530, 8, 531, 8, 532, 373, 374, 533, 
	531, 531, 535, 532, 378, 379, 534, 532, 
	373, 374, 536, 531, 532, 373, 374, 537, 
	531, 538, 539, 540, 538, 532, 373, 374, 
	537, 531, 538, 539, 540, 538, 532, 373, 
	374, 533, 531, 539, 532, 373, 374, 533, 
	531, 8, 383, 541, 380, 8, 383, 542, 
	380, 8, 542, 415, 543, 542, 380, 8, 
	415, 380, 8, 383, 544, 545, 380, 8, 
	383, 546, 380, 8, 383, 547, 380, 8, 
	383, 548, 380, 8, 383, 549, 380, 8, 
	383, 550, 380, 8, 383, 406, 380, 8, 
	383, 551, 380, 8, 383, 552, 380, 8, 
	383, 553, 380, 8, 383, 554, 380, 8, 
	555, 383, 555, 556, 557, 558, 380, 8, 
	560, 559, 561, 561, 556, 373, 374, 562, 
	563, 8, 564, 8, 565, 8, 565, 566, 
	567, 565, 8, 566, 8, 563, 563, 568, 
	569, 570, 570, 8, 8, 572, 571, 573, 
	8, 574, 8, 574, 575, 576, 574, 8, 
	575, 8, 577, 578, 577, 578, 8, 579, 
	580, 579, 580, 8, 581, 581, 8, 582, 
	582, 8, 583, 583, 8, 584, 584, 8, 
	585, 585, 8, 586, 586, 8, 587, 587, 
	8, 588, 588, 8, 589, 589, 8, 590, 
	590, 8, 591, 591, 8, 592, 592, 8, 
	593, 593, 8, 594, 594, 8, 8, 383, 
	595, 380, 8, 383, 596, 380, 8, 596, 
	560, 597, 596, 380, 8, 560, 380, 8, 
	558, 383, 558, 598, 599, 600, 600, 380, 
	8, 602, 601, 603, 603, 598, 373, 374, 
	604, 570, 570, 8, 605, 8, 606, 8, 
	606, 607, 608, 606, 8, 607, 8, 8, 
	383, 609, 380, 8, 383, 610, 380, 8, 
	610, 602, 611, 610, 380, 8, 602, 380, 
	8, 383, 612, 613, 612, 613, 380, 8, 
	383, 614, 615, 614, 615, 380, 8, 383, 
	616, 616, 380, 8, 383, 617, 617, 380, 
	8, 383, 618, 618, 380, 8, 383, 619, 
	619, 380, 8, 620, 383, 620, 385, 378, 
	379, 380, 8, 383, 621, 621, 380, 8, 
	383, 622, 622, 380, 8, 383, 623, 623, 
	380, 8, 383, 624, 624, 380, 8, 383, 
	625, 625, 380, 8, 383, 626, 626, 380, 
	8, 383, 627, 627, 380, 8, 383, 628, 
	628, 380, 8, 383, 629, 629, 380, 8, 
	383, 630, 630, 380, 8, 383, 631, 380, 
	8, 383, 632, 380, 8, 383, 633, 380, 
	8, 383, 634, 380, 8, 383, 635, 380, 
	8, 383, 636, 380, 8, 383, 637, 380, 
	8, 383, 638, 380, 8, 638, 383, 638, 
	639, 640, 641, 380, 8, 643, 642, 644, 
	644, 639, 373, 374, 645, 432, 8, 646, 
	8, 647, 8, 647, 648, 649, 647, 8, 
	648, 8, 8, 383, 650, 380, 8, 383, 
	651, 380, 8, 651, 643, 652, 651, 380, 
	8, 643, 380, 8, 641, 383, 641, 653, 
	654, 655, 655, 380, 8, 657, 656, 658, 
	658, 653, 373, 374, 659, 441, 441, 8, 
	660, 8, 661, 8, 661, 662, 663, 661, 
	8, 662, 8, 8, 383, 664, 380, 8, 
	383, 665, 380, 8, 665, 657, 666, 665, 
	380, 8, 657, 380, 8, 383, 667, 668, 
	667, 668, 380, 8, 383, 669, 670, 669, 
	670, 380, 8, 383, 671, 671, 380, 8, 
	383, 672, 672, 380, 8, 383, 673, 673, 
	380, 8, 383, 674, 674, 380, 8, 383, 
	675, 675, 380, 8, 383, 676, 676, 380, 
	8, 383, 677, 677, 380, 8, 383, 678, 
	678, 380, 8, 383, 679, 679, 380, 8, 
	383, 680, 680, 380, 8, 383, 681, 681, 
	380, 8, 383, 682, 682, 380, 8, 383, 
	683, 683, 380, 8, 383, 684, 684, 380, 
	8, 383, 685, 380, 8, 383, 686, 380, 
	8, 383, 687, 380, 8, 383, 688, 380, 
	8, 383, 473, 380, 8, 383, 689, 690, 
	380, 8, 383, 691, 692, 380, 8, 383, 
	693, 380, 8, 383, 694, 380, 8, 383, 
	473, 380, 8, 383, 695, 380, 8, 383, 
	696, 380, 8, 383, 697, 380, 8, 383, 
	698, 380, 8, 383, 699, 380, 8, 383, 
	700, 380, 8, 700, 383, 700, 701, 702, 
	703, 380, 8, 705, 704, 706, 706, 701, 
	373, 374, 707, 494, 8, 708, 8, 709, 
	8, 709, 710, 711, 709, 8, 710, 8, 
	8, 383, 712, 380, 8, 383, 713, 380, 
	8, 713, 705, 714, 713, 380, 8, 705, 
	380, 8, 703, 383, 703, 715, 716, 717, 
	717, 380, 8, 719, 718, 720, 720, 715, 
	373, 374, 721, 503, 503, 8, 722, 8, 
	723, 8, 723, 724, 725, 723, 8, 724, 
	8, 8, 383, 726, 380, 8, 383, 727, 
	380, 8, 727, 719, 728, 727, 380, 8, 
	719, 380, 8, 383, 729, 730, 729, 730, 
	380, 8, 383, 731, 732, 731, 732, 380, 
	8, 383, 733, 733, 380, 8, 383, 734, 
	734, 380, 8, 383, 735, 735, 380, 8, 
	383, 736, 736, 380, 8, 383, 737, 737, 
	380, 8, 383, 738, 738, 380, 8, 383, 
	739, 739, 380, 8, 383, 740, 740, 380, 
	8, 383, 741, 741, 380, 8, 383, 742, 
	742, 380, 8, 383, 743, 743, 380, 8, 
	383, 744, 744, 380, 8, 383, 745, 745, 
	380, 8, 383, 746, 746, 380, 8, 383, 
	747, 380, 8, 383, 748, 380, 8, 383, 
	749, 380, 8, 383, 534, 380, 404, 373, 
	374, 750, 403, 404, 373, 374, 751, 403, 
	752, 753, 754, 752, 404, 373, 374, 751, 
	403, 752, 753, 754, 752, 404, 373, 374, 
	405, 403, 753, 404, 373, 374, 405, 403, 
	755, 8, 756, 8, 757, 8, 758, 8, 
	759, 759, 760, 761, 563, 8, 8, 763, 
	762, 764, 8, 765, 8, 765, 766, 767, 
	765, 8, 766, 8, 768, 8, 769, 8, 
	769, 770, 771, 769, 8, 770, 8, 8, 
	381, 380, 372, 373, 374, 772, 371, 372, 
	373, 374, 773, 371, 774, 775, 776, 774, 
	372, 373, 374, 773, 371, 774, 775, 776, 
	774, 372, 373, 374, 375, 371, 775, 372, 
	373, 374, 375, 371, 480, 777, 8, 778, 
	8, 779, 8, 780, 8, 781, 8, 782, 
	373, 374, 783, 781, 781, 785, 782, 378, 
	379, 784, 782, 373, 374, 786, 781, 782, 
	373, 374, 787, 781, 788, 789, 790, 788, 
	782, 373, 374, 787, 781, 788, 789, 790, 
	788, 782, 373, 374, 783, 781, 789, 782, 
	373, 374, 783, 781, 791, 8, 792, 8, 
	792, 793, 794, 792, 8, 793, 8, 795, 
	795, 796, 796, 796, 8, 797, 799, 798, 
	798, 798, 798, 8, 801, 800, 802, 803, 
	804, 802, 805, 8, 806, 807, 808, 806, 
	809, 8, 807, 8, 8, 811, 812, 810, 
	8, 814, 815, 813, 814, 8, 816, 817, 
	818, 816, 819, 820, 821, 8, 822, 823, 
	824, 822, 825, 826, 827, 826, 826, 8, 
	828, 829, 830, 828, 831, 832, 833, 832, 
	832, 8, 829, 8, 8, 834, 8, 831, 
	835, 829, 830, 835, 831, 832, 832, 832, 
	8, 836, 838, 837, 837, 837, 837, 8, 
	840, 839, 841, 842, 843, 841, 844, 8, 
	845, 846, 847, 845, 848, 8, 846, 8, 
	8, 850, 851, 849, 8, 853, 854, 852, 
	853, 8, 836, 838, 837, 855, 837, 837, 
	837, 8, 836, 838, 837, 856, 837, 837, 
	837, 8, 817, 8, 8, 858, 857, 820, 
	820, 859, 860, 861, 862, 863, 864, 865, 
	866, 867, 8, 8, 869, 868, 870, 8, 
	871, 8, 871, 872, 873, 871, 8, 872, 
	8, 874, 875, 8, 876, 8, 877, 8, 
	878, 8, 879, 8, 880, 8, 881, 8, 
	882, 883, 884, 885, 881, 881, 887, 882, 
	888, 889, 886, 8, 888, 891, 892, 888, 
	893, 894, 890, 8, 895, 890, 896, 896, 
	897, 883, 884, 898, 8, 883, 817, 818, 
	883, 899, 900, 8, 8, 902, 901, 903, 
	8, 904, 8, 904, 905, 906, 904, 8, 
	905, 8, 884, 884, 907, 908, 861, 909, 
	863, 864, 865, 866, 867, 8, 8, 911, 
	910, 912, 8, 913, 8, 913, 914, 915, 
	913, 8, 914, 8, 916, 8, 917, 8, 
	918, 8, 919, 8, 920, 8, 921, 8, 
	922, 8, 923, 883, 884, 924, 922, 922, 
	926, 923, 888, 889, 925, 8, 889, 895, 
	889, 927, 928, 929, 930, 931, 932, 933, 
	934, 935, 890, 8, 937, 936, 938, 938, 
	927, 883, 884, 939, 861, 909, 863, 864, 
	865, 866, 867, 8, 940, 8, 941, 8, 
	941, 942, 943, 941, 8, 942, 8, 944, 
	8, 945, 8, 946, 8, 947, 8, 948, 
	8, 949, 8, 880, 8, 950, 8, 951, 
	8, 952, 8, 953, 8, 954, 8, 955, 
	8, 956, 8, 957, 8, 957, 957, 958, 
	959, 960, 8, 8, 962, 961, 963, 8, 
	964, 8, 964, 965, 966, 964, 8, 965, 
	8, 960, 960, 967, 968, 969, 969, 8, 
	8, 971, 970, 972, 8, 973, 8, 973, 
	974, 975, 973, 8, 974, 8, 976, 977, 
	976, 977, 8, 978, 979, 978, 979, 8, 
	980, 980, 8, 981, 981, 8, 982, 982, 
	8, 983, 983, 8, 984, 984, 8, 985, 
	985, 8, 986, 986, 8, 987, 987, 8, 
	988, 988, 8, 989, 989, 8, 990, 990, 
	8, 991, 991, 8, 992, 992, 8, 993, 
	993, 8, 994, 8, 995, 8, 996, 8, 
	997, 8, 881, 8, 998, 8, 999, 8, 
	1000, 1001, 8, 1002, 8, 1003, 8, 1004, 
	8, 1005, 8, 1006, 8, 1006, 1006, 1007, 
	1008, 1009, 8, 8, 1011, 1010, 1012, 8, 
	1013, 8, 1013, 1014, 1015, 1013, 8, 1014, 
	8, 1009, 1009, 1016, 1017, 1018, 1018, 8, 
	8, 1020, 1019, 1021, 8, 1022, 8, 1022, 
	1023, 1024, 1022, 8, 1023, 8, 1025, 1026, 
	1025, 1026, 8, 1027, 1028, 1027, 1028, 8, 
	1029, 1029, 8, 1030, 1030, 8, 1031, 1031, 
	8, 1032, 1032, 8, 1033, 1033, 8, 1034, 
	1034, 8, 1035, 1035, 8, 1036, 1036, 8, 
	1037, 1037, 8, 1038, 1038, 8, 1039, 1039, 
	8, 1040, 1040, 8, 1041, 1041, 8, 1042, 
	1042, 8, 1043, 8, 1044, 8, 1045, 8, 
	1046, 8, 1047, 8, 1048, 8, 1049, 8, 
	1050, 8, 881, 8, 1051, 8, 1052, 8, 
	1053, 8, 1054, 8, 948, 8, 8, 895, 
	1055, 890, 8, 895, 1056, 890, 8, 1056, 
	937, 1057, 1056, 890, 8, 937, 890, 8, 
	895, 1058, 1059, 890, 8, 895, 1060, 890, 
	8, 895, 1061, 890, 8, 895, 1062, 890, 
	8, 895, 1063, 890, 8, 895, 1064, 890, 
	8, 895, 886, 890, 8, 895, 1065, 890, 
	8, 895, 1066, 890, 8, 895, 1067, 890, 
	8, 895, 1068, 890, 8, 1069, 895, 1069, 
	1070, 1071, 1072, 890, 8, 1074, 1073, 1075, 
	1075, 1070, 883, 884, 1076, 1077, 8, 1078, 
	8, 1079, 8, 1079, 1080, 1081, 1079, 8, 
	1080, 8, 1077, 1077, 1082, 1083, 1084, 1084, 
	8, 8, 1086, 1085, 1087, 8, 1088, 8, 
	1088, 1089, 1090, 1088, 8, 1089, 8, 1091, 
	1092, 1091, 1092, 8, 1093, 1094, 1093, 1094, 
	8, 1095, 1095, 8, 1096, 1096, 8, 1097, 
	1097, 8, 1098, 1098, 8, 1099, 1099, 8, 
	1100, 1100, 8, 1101, 1101, 8, 1102, 1102, 
	8, 1103, 1103, 8, 1104, 1104, 8, 1105, 
	1105, 8, 1106, 1106, 8, 1107, 1107, 8, 
	1108, 1108, 8, 8, 895, 1109, 890, 8, 
	895, 1110, 890, 8, 1110, 1074, 1111, 1110, 
	890, 8, 1074, 890, 8, 1072, 895, 1072, 
	1112, 1113, 1114, 1114, 890, 8, 1116, 1115, 
	1117, 1117, 1112, 883, 884, 1118, 1084, 1084, 
	8, 1119, 8, 1120, 8, 1120, 1121, 1122, 
	1120, 8, 1121, 8, 8, 895, 1123, 890, 
	8, 895, 1124, 890, 8, 1124, 1116, 1125, 
	1124, 890, 8, 1116, 890, 8, 895, 1126, 
	1127, 1126, 1127, 890, 8, 895, 1128, 1129, 
	1128, 1129, 890, 8, 895, 1130, 1130, 890, 
	8, 895, 1131, 1131, 890, 8, 895, 1132, 
	1132, 890, 8, 895, 1133, 1133, 890, 8, 
	1134, 895, 1134, 897, 888, 889, 890, 8, 
	895, 1135, 1135, 890, 8, 895, 1136, 1136, 
	890, 8, 895, 1137, 1137, 890, 8, 895, 
	1138, 1138, 890, 8, 895, 1139, 1139, 890, 
	8, 895, 1140, 1140, 890, 8, 895, 1141, 
	1141, 890, 8, 895, 1142, 1142, 890, 8, 
	895, 1143, 1143, 890, 8, 895, 1144, 1144, 
	890, 8, 895, 1145, 890, 8, 895, 1146, 
	890, 8, 895, 1147, 890, 8, 895, 1148, 
	890, 8, 895, 1149, 890, 8, 895, 1150, 
	890, 8, 895, 925, 890, 8, 895, 1151, 
	890, 8, 895, 1152, 890, 8, 895, 1153, 
	890, 8, 895, 1154, 890, 8, 895, 1155, 
	890, 8, 895, 1156, 890, 8, 895, 1064, 
	890, 8, 895, 1157, 890, 8, 895, 1158, 
	890, 8, 895, 1159, 890, 8, 895, 1160, 
	890, 8, 895, 1161, 890, 8, 895, 1162, 
	890, 8, 895, 1163, 890, 8, 895, 1164, 
	890, 8, 1164, 895, 1164, 1165, 1166, 1167, 
	890, 8, 1169, 1168, 1170, 1170, 1165, 883, 
	884, 1171, 960, 8, 1172, 8, 1173, 8, 
	1173, 1174, 1175, 1173, 8, 1174, 8, 8, 
	895, 1176, 890, 8, 895, 1177, 890, 8, 
	1177, 1169, 1178, 1177, 890, 8, 1169, 890, 
	8, 1167, 895, 1167, 1179, 1180, 1181, 1181, 
	890, 8, 1183, 1182, 1184, 1184, 1179, 883, 
	884, 1185, 969, 969, 8, 1186, 8, 1187, 
	8, 1187, 1188, 1189, 1187, 8, 1188, 8, 
	8, 895, 1190, 890, 8, 895, 1191, 890, 
	8, 1191, 1183, 1192, 1191, 890, 8, 1183, 
	890, 8, 895, 1193, 1194, 1193, 1194, 890, 
	8, 895, 1195, 1196, 1195, 1196, 890, 8, 
	895, 1197, 1197, 890, 8, 895, 1198, 1198, 
	890, 8, 895, 1199, 1199, 890, 8, 895, 
	1200, 1200, 890, 8, 895, 1201, 1201, 890, 
	8, 895, 1202, 1202, 890, 8, 895, 1203, 
	1203, 890, 8, 895, 1204, 1204, 890, 8, 
	895, 1205, 1205, 890, 8, 895, 1206, 1206, 
	890, 8, 895, 1207, 1207, 890, 8, 895, 
	1208, 1208, 890, 8, 895, 1209, 1209, 890, 
	8, 895, 1210, 1210, 890, 8, 895, 1211, 
	890, 8, 895, 1212, 890, 8, 895, 1213, 
	890, 8, 895, 1214, 890, 8, 895, 886, 
	890, 8, 895, 1215, 890, 8, 895, 1216, 
	890, 8, 895, 1217, 1218, 890, 8, 895, 
	1219, 890, 8, 895, 1220, 890, 8, 895, 
	1221, 890, 8, 895, 1222, 890, 8, 895, 
	1223, 890, 8, 1223, 895, 1223, 1224, 1225, 
	1226, 890, 8, 1228, 1227, 1229, 1229, 1224, 
	883, 884, 1230, 1009, 8, 1231, 8, 1232, 
	8, 1232, 1233, 1234, 1232, 8, 1233, 8, 
	8, 895, 1235, 890, 8, 895, 1236, 890, 
	8, 1236, 1228, 1237, 1236, 890, 8, 1228, 
	890, 8, 1226, 895, 1226, 1238, 1239, 1240, 
	1240, 890, 8, 1242, 1241, 1243, 1243, 1238, 
	883, 884, 1244, 1018, 1018, 8, 1245, 8, 
	1246, 8, 1246, 1247, 1248, 1246, 8, 1247, 
	8, 8, 895, 1249, 890, 8, 895, 1250, 
	890, 8, 1250, 1242, 1251, 1250, 890, 8, 
	1242, 890, 8, 895, 1252, 1253, 1252, 1253, 
	890, 8, 895, 1254, 1255, 1254, 1255, 890, 
	8, 895, 1256, 1256, 890, 8, 895, 1257, 
	1257, 890, 8, 895, 1258, 1258, 890, 8, 
	895, 1259, 1259, 890, 8, 895, 1260, 1260, 
	890, 8, 895, 1261, 1261, 890, 8, 895, 
	1262, 1262, 890, 8, 895, 1263, 1263, 890, 
	8, 895, 1264, 1264, 890, 8, 895, 1265, 
	1265, 890, 8, 895, 1266, 1266, 890, 8, 
	895, 1267, 1267, 890, 8, 895, 1268, 1268, 
	890, 8, 895, 1269, 1269, 890, 8, 895, 
	1270, 890, 8, 895, 1271, 890, 8, 895, 
	1272, 890, 8, 895, 1273, 890, 8, 895, 
	1274, 890, 8, 895, 1275, 890, 8, 895, 
	1276, 890, 8, 895, 1277, 890, 8, 895, 
	886, 890, 8, 895, 1278, 890, 8, 895, 
	1279, 890, 8, 895, 1280, 890, 8, 895, 
	1281, 890, 8, 895, 1155, 890, 923, 883, 
	884, 1282, 922, 923, 883, 884, 1283, 922, 
	1284, 1285, 1286, 1284, 923, 883, 884, 1283, 
	922, 1284, 1285, 1286, 1284, 923, 883, 884, 
	924, 922, 1285, 923, 883, 884, 924, 922, 
	1287, 8, 1288, 8, 1288, 1289, 1290, 1288, 
	8, 1289, 8, 1291, 823, 824, 1291, 1292, 
	883, 884, 898, 826, 827, 826, 826, 8, 
	1293, 829, 830, 1293, 1294, 883, 884, 898, 
	832, 833, 832, 832, 8, 8, 1296, 890, 
	1295, 1297, 829, 830, 1297, 1294, 883, 884, 
	898, 832, 832, 832, 8, 8, 891, 890, 
	8, 1299, 1298, 1300, 817, 818, 1300, 893, 
	883, 884, 1301, 8, 1302, 8, 1303, 8, 
	1303, 1304, 1305, 1303, 8, 1304, 8, 8, 
	895, 1306, 890, 8, 895, 1307, 890, 8, 
	1307, 1299, 1308, 1307, 890, 8, 1299, 890, 
	882, 883, 884, 1309, 881, 882, 883, 884, 
	1310, 881, 1311, 1312, 1313, 1311, 882, 883, 
	884, 1310, 881, 1311, 1312, 1313, 1311, 882, 
	883, 884, 885, 881, 1312, 882, 883, 884, 
	885, 881, 1314, 8, 1315, 8, 1316, 8, 
	1317, 8, 1318, 1318, 1319, 1320, 1077, 8, 
	8, 1322, 1321, 1323, 8, 1324, 8, 1324, 
	1325, 1326, 1324, 8, 1325, 8, 1327, 8, 
	1328, 8, 1329, 8, 1330, 8, 1331, 8, 
	1332, 8, 1333, 8, 1334, 883, 884, 1335, 
	1333, 1333, 1337, 1334, 888, 889, 1336, 1334, 
	883, 884, 1338, 1333, 1334, 883, 884, 1339, 
	1333, 1340, 1341, 1342, 1340, 1334, 883, 884, 
	1339, 1333, 1340, 1341, 1342, 1340, 1334, 883, 
	884, 1335, 1333, 1341, 1334, 883, 884, 1335, 
	1333, 1343, 8, 1344, 8, 1344, 1345, 1346, 
	1344, 8, 1345, 8, 1347, 1349, 1348, 1347, 
	1351, 1350, 1352, 1347, 1354, 1353, 1355, 1353, 
	1356, 1353, 1357, 1353, 1358, 1353, 1359, 1353, 
	1360, 1353, 1361, 1353, 1362, 1353, 1363, 1353, 
	1364, 1353, 1365, 1353, 1366, 1353, 1367, 1353, 
	1368, 1353, 1369, 1353, 1370, 1353, 1371, 1353, 
	1372, 1353, 1373, 8, 8, 1375, 1376, 1374, 
	8, 1378, 1377, 1379, 8, 1380, 8, 1380, 
	1381, 1382, 1380, 8, 1381, 8, 1383, 1352, 
	8, 1384, 8, 1386, 1386, 1387, 1385, 1388, 
	1389, 1390, 1391, 1392, 1393, 8, 1389, 8, 
	1391, 1389, 1390, 1391, 1392, 8, 8, 1395, 
	1394, 8, 1397, 1396, 1398, 8, 1399, 8, 
	1400, 8, 1401, 8, 1402, 8, 1403, 8, 
	1404, 8, 1404, 1404, 1405, 1406, 1408, 1407, 
	1409, 1410, 1407, 1407, 8, 8, 1412, 1411, 
	1413, 8, 1414, 8, 1414, 1415, 1416, 1414, 
	8, 1415, 8, 1417, 1418, 1419, 1417, 1420, 
	1421, 1422, 1424, 1425, 1423, 1423, 1423, 1423, 
	8, 1426, 1427, 1428, 1426, 1429, 1430, 1431, 
	1432, 1433, 8, 1427, 8, 8, 1435, 1434, 
	1436, 1427, 1428, 1436, 1429, 1430, 1431, 1432, 
	8, 1437, 1438, 1437, 1439, 1440, 1438, 1441, 
	1442, 1443, 1443, 1443, 8, 8, 1445, 1444, 
	1446, 1447, 1448, 1446, 1449, 1450, 1446, 8, 
	1447, 8, 8, 1452, 1451, 1453, 8, 1454, 
	8, 1454, 1455, 1456, 1454, 8, 1455, 8, 
	1457, 8, 1458, 8, 1458, 1459, 1460, 1458, 
	8, 1459, 8, 1462, 1463, 1440, 1438, 1464, 
	1461, 1461, 1466, 1463, 1444, 1467, 1465, 8, 
	1468, 1469, 1468, 1439, 1467, 1470, 1444, 1462, 
	1463, 1440, 1438, 1471, 1461, 1462, 1463, 1440, 
	1438, 1472, 1461, 1473, 1474, 1475, 1473, 1463, 
	1440, 1438, 1472, 1461, 1473, 1474, 1475, 1473, 
	1463, 1440, 1438, 1464, 1461, 1474, 1463, 1440, 
	1438, 1464, 1461, 1476, 1477, 1476, 1478, 1479, 
	1477, 1480, 1482, 1481, 1481, 1481, 1481, 8, 
	1483, 8, 1484, 8, 1484, 1485, 1486, 1484, 
	8, 1485, 8, 1427, 1428, 8, 1433, 1433, 
	1487, 1488, 1489, 1490, 1491, 1489, 1489, 8, 
	8, 1493, 1492, 1494, 8, 1495, 8, 1495, 
	1496, 1497, 1495, 8, 1496, 8, 1498, 1418, 
	1419, 1498, 1420, 1421, 1422, 1424, 1499, 1499, 
	1499, 1499, 8, 1498, 1418, 1419, 1498, 1420, 
	1421, 1422, 1424, 1499, 1500, 1499, 1499, 1499, 
	8, 1498, 1418, 1419, 1498, 1420, 1421, 1422, 
	1424, 1499, 1501, 1499, 1499, 1499, 8, 1498, 
	1418, 1419, 1498, 1420, 1421, 1502, 1424, 1499, 
	1499, 1499, 1499, 8, 1483, 1489, 1489, 1489, 
	8, 1498, 1418, 1419, 1498, 1420, 1421, 1422, 
	1424, 1499, 1503, 1499, 1499, 1499, 8, 1498, 
	1418, 1419, 1498, 1420, 1421, 1422, 1424, 1499, 
	1504, 1499, 1499, 1499, 8, 1498, 1418, 1419, 
	1498, 1420, 1421, 1505, 1424, 1499, 1499, 1499, 
	1499, 8, 1408, 1506, 1408, 1507, 1509, 1508, 
	1408, 1508, 1508, 8, 8, 1511, 1510, 1512, 
	8, 1513, 8, 1513, 1514, 1515, 1513, 8, 
	1514, 8, 1516, 1517, 1516, 1518, 1520, 1519, 
	1516, 1519, 1519, 1519, 8, 1521, 1521, 1433, 
	8, 1417, 1418, 1419, 1417, 1420, 1421, 1422, 
	1424, 1425, 1423, 1522, 1423, 1423, 1423, 8, 
	1417, 1418, 1419, 1417, 1420, 1421, 1422, 1424, 
	1425, 1423, 1523, 1423, 1423, 1423, 8, 1417, 
	1418, 1419, 1417, 1420, 1421, 1502, 1424, 1425, 
	1423, 1423, 1423, 1423, 8, 1417, 1418, 1419, 
	1417, 1420, 1421, 1422, 1424, 1425, 1423, 1524, 
	1423, 1423, 1423, 8, 1417, 1418, 1419, 1417, 
	1420, 1421, 1422, 1424, 1425, 1423, 1525, 1423, 
	1423, 1423, 8, 1417, 1418, 1419, 1417, 1420, 
	1421, 1505, 1424, 1425, 1423, 1423, 1423, 1423, 
	8, 8, 1526, 1527, 1528, 1529, 1530, 1531, 
	1532, 8, 1528, 8, 1530, 1528, 1529, 1530, 
	1531, 8, 8, 1534, 1533, 8, 1536, 1535, 
	1537, 8, 1538, 8, 1539, 8, 1540, 8, 
	1541, 8, 1542, 8, 1543, 8, 1544, 8, 
	1545, 8, 1546, 8, 1547, 8, 1548, 8, 
	1549, 8, 1550, 8, 1551, 8, 1551, 1551, 
	1552, 1553, 1554, 1554, 1554, 8, 8, 1556, 
	1555, 1557, 8, 1558, 8, 1558, 1559, 1560, 
	1558, 8, 1559, 8, 1561, 1562, 1563, 1561, 
	1564, 1565, 1566, 1568, 1567, 1567, 1567, 1567, 
	8, 1569, 1570, 1571, 1569, 1572, 1573, 1574, 
	1575, 8, 1570, 8, 8, 1577, 1576, 1578, 
	1573, 1578, 1570, 1571, 1578, 1579, 1580, 1575, 
	8, 8, 1582, 1581, 1583, 8, 1584, 8, 
	1584, 1585, 1586, 1584, 8, 1585, 8, 1587, 
	1587, 1588, 1589, 1590, 1590, 1590, 8, 8, 
	1592, 1591, 1593, 8, 1594, 8, 1594, 1595, 
	1596, 1594, 8, 1595, 8, 1597, 1598, 1599, 
	1597, 1600, 1601, 1602, 1603, 1603, 1603, 1603, 
	8, 1604, 1570, 1571, 1604, 1605, 1606, 1607, 
	8, 8, 1609, 1608, 1610, 1610, 1611, 1612, 
	1613, 1613, 1613, 8, 8, 1615, 1614, 1616, 
	8, 1617, 8, 1617, 1618, 1619, 1617, 8, 
	1618, 8, 1620, 1598, 1599, 1620, 1621, 1601, 
	1622, 1623, 1623, 1623, 1623, 8, 1624, 1570, 
	1571, 1624, 1625, 1626, 8, 8, 1628, 1627, 
	1629, 8, 1630, 8, 1630, 1631, 1632, 1630, 
	8, 1631, 8, 1633, 8, 1634, 8, 1634, 
	1635, 1636, 1634, 8, 1635, 8, 1637, 8, 
	1638, 8, 1638, 1639, 1640, 1638, 8, 1639, 
	8, 1641, 1642, 24, 8, 1644, 1645, 1646, 
	1644, 1647, 1648, 1649, 1650, 1651, 1652, 1649, 
	1649, 1643, 1644, 1644, 1653, 1645, 1654, 1654, 
	28, 27, 1655, 1654, 1657, 1649, 1649, 1649, 
	1649, 1656, 1659, 1659, 1660, 1661, 1660, 1660, 
	1660, 1660, 1658, 1657, 1649, 1662, 1649, 1649, 
	1649, 1656, 1657, 1649, 1663, 1649, 1649, 1649, 
	1656, 1657, 1649, 1664, 1649, 1649, 1649, 1656, 
	1657, 1665, 1649, 1649, 1649, 1656, 1657, 1649, 
	1666, 1649, 1649, 1649, 1656, 1657, 1649, 1667, 
	1649, 1649, 1649, 1656, 1657, 1649, 1668, 1649, 
	1649, 1649, 1656, 1657, 1649, 1669, 1649, 1649, 
	1649, 1656, 1657, 1649, 1670, 1649, 1649, 1649, 
	1656, 1657, 1649, 1671, 1649, 1649, 1649, 1656, 
	1657, 1649, 1672, 1649, 1649, 1649, 1656, 1657, 
	1649, 1673, 1649, 1649, 1649, 1656, 1657, 1649, 
	1674, 1649, 1649, 1649, 1656, 1657, 1649, 1675, 
	1649, 1649, 1649, 1656, 38, 38, 39, 1657, 
	40, 1649, 1649, 1649, 1649, 1656, 1676, 63, 
	64, 65, 63, 1677, 67, 68, 51, 52, 
	52, 1678, 61, 53, 1679, 61, 1678, 100, 
	88, 89, 100, 1678, 75, 76, 77, 75, 
	78, 82, 83, 1678, 103, 76, 77, 103, 
	90, 91, 1678, 83, 76, 77, 83, 90, 
	91, 1678, 111, 112, 1680, 111, 1678, 8, 
	1682, 1683, 1684, 1682, 1685, 1681, 1686, 1682, 
	1683, 1684, 1682, 1685, 1681, 1683, 1686, 8, 
	1688, 287, 1689, 1688, 173, 1690, 1691, 1691, 
	1687, 1692, 1692, 1692, 1692, 1692, 1692, 1687, 
	172, 172, 173, 1693, 175, 176, 177, 175, 
	178, 179, 180, 181, 178, 179, 180, 181, 
	1694, 289, 1696, 1695, 1692, 1692, 1692, 1692, 
	1692, 1697, 1697, 1692, 1687, 1692, 1692, 1692, 
	1692, 1692, 1698, 1698, 1692, 1687, 1692, 1692, 
	1699, 1692, 1692, 1692, 1687, 295, 295, 296, 
	8, 1701, 1701, 1702, 1700, 1701, 1701, 1702, 
	1700, 313, 8, 1704, 330, 1704, 1705, 329, 
	1706, 338, 339, 1706, 340, 1707, 8, 1706, 
	338, 339, 1706, 1708, 340, 1707, 8, 8, 
	384, 384, 385, 373, 374, 386, 8, 795, 
	795, 796, 796, 796, 8, 836, 1709, 837, 
	837, 837, 837, 8, 841, 842, 843, 841, 
	844, 8, 1710, 1373, 1711, 1710, 1712, 1713, 
	1714, 1715, 1716, 8, 1710, 1710, 1718, 1719, 
	1715, 1716, 1717, 1717, 1351, 1350, 1384, 1384, 
	1721, 1720, 1385, 8, 8, 8, 0
};

static const short _MFileScanner_trans_targs[] = {
	0, 1, 1, 2, 3, 4, 5, 12, 
	0, 6, 7, 8, 9, 10, 11, 1233, 
	13, 14, 15, 16, 17, 18, 1233, 19, 
	0, 1234, 1235, 20, 1235, 22, 1235, 23, 
	1235, 1241, 1235, 25, 26, 1235, 27, 28, 
	33, 29, 30, 31, 30, 31, 31, 32, 
	33, 1235, 34, 35, 1258, 1257, 36, 37, 
	38, 37, 1257, 39, 40, 1259, 1257, 42, 
	1257, 43, 44, 46, 74, 45, 45, 45, 
	1257, 47, 48, 49, 1257, 50, 51, 62, 
	66, 1257, 52, 56, 51, 49, 53, 54, 
	49, 55, 57, 58, 57, 56, 59, 60, 
	56, 61, 63, 64, 1260, 1261, 65, 1262, 
	67, 68, 69, 68, 1263, 70, 71, 1264, 
	1263, 73, 75, 76, 77, 78, 79, 80, 
	81, 1257, 83, 84, 85, 86, 87, 88, 
	89, 90, 91, 92, 93, 94, 95, 96, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 1257, 
	1265, 113, 112, 1265, 117, 118, 119, 114, 
	1265, 116, 115, 120, 122, 119, 121, 120, 
	121, 121, 1265, 1268, 123, 1271, 1268, 124, 
	1268, 125, 126, 150, 173, 185, 127, 128, 
	129, 130, 131, 132, 133, 134, 135, 136, 
	137, 138, 139, 140, 141, 142, 143, 144, 
	145, 146, 147, 146, 148, 147, 148, 1268, 
	149, 151, 152, 153, 154, 155, 156, 157, 
	158, 159, 160, 161, 162, 163, 164, 165, 
	166, 167, 168, 169, 170, 169, 171, 170, 
	171, 1268, 172, 174, 175, 176, 177, 178, 
	179, 180, 181, 182, 183, 1268, 184, 186, 
	187, 208, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 204, 206, 205, 206, 
	1268, 207, 209, 210, 211, 212, 213, 214, 
	215, 216, 217, 218, 219, 1268, 220, 1268, 
	1268, 1268, 1268, 224, 225, 226, 1268, 227, 
	228, 228, 1276, 229, 230, 231, 232, 1276, 
	233, 234, 1277, 236, 235, 1277, 237, 1277, 
	239, 0, 240, 241, 242, 243, 244, 245, 
	246, 247, 248, 249, 1279, 250, 251, 1279, 
	252, 253, 1280, 254, 255, 256, 257, 1280, 
	258, 259, 1281, 260, 261, 1281, 262, 1282, 
	263, 1283, 264, 265, 266, 622, 265, 263, 
	267, 268, 272, 307, 343, 610, 267, 266, 
	269, 270, 266, 271, 273, 590, 274, 275, 
	276, 277, 278, 279, 280, 284, 285, 605, 
	280, 279, 281, 300, 282, 1284, 604, 283, 
	283, 282, 600, 286, 287, 291, 355, 286, 
	285, 288, 289, 285, 290, 292, 293, 294, 
	295, 296, 297, 298, 299, 585, 299, 298, 
	301, 405, 409, 481, 527, 532, 301, 302, 
	302, 303, 304, 305, 302, 306, 308, 309, 
	310, 311, 312, 313, 314, 315, 316, 317, 
	321, 316, 315, 318, 319, 315, 320, 322, 
	323, 327, 322, 321, 324, 325, 321, 326, 
	328, 339, 329, 333, 330, 331, 332, 283, 
	334, 335, 336, 337, 338, 283, 340, 341, 
	342, 283, 344, 345, 346, 347, 348, 349, 
	350, 349, 348, 351, 352, 353, 348, 354, 
	356, 394, 357, 360, 358, 359, 361, 362, 
	363, 364, 365, 366, 367, 368, 372, 367, 
	366, 369, 370, 366, 371, 373, 374, 378, 
	373, 372, 375, 376, 372, 377, 379, 390, 
	380, 384, 381, 382, 383, 283, 385, 386, 
	387, 388, 389, 283, 391, 392, 393, 283, 
	395, 396, 397, 398, 399, 400, 399, 398, 
	401, 402, 403, 398, 404, 406, 407, 408, 
	410, 416, 411, 412, 413, 414, 415, 417, 
	418, 419, 420, 420, 421, 449, 453, 421, 
	422, 422, 423, 427, 424, 425, 422, 426, 
	428, 429, 433, 428, 427, 430, 431, 427, 
	432, 434, 445, 435, 439, 436, 437, 438, 
	283, 440, 441, 442, 443, 444, 283, 446, 
	447, 448, 283, 450, 451, 452, 454, 460, 
	464, 454, 455, 455, 456, 457, 458, 455, 
	459, 461, 462, 463, 465, 477, 466, 471, 
	467, 468, 469, 470, 470, 472, 473, 474, 
	475, 476, 470, 478, 479, 480, 470, 482, 
	483, 484, 485, 486, 487, 488, 489, 490, 
	496, 500, 490, 491, 491, 492, 493, 494, 
	491, 495, 497, 498, 499, 501, 507, 511, 
	501, 502, 502, 503, 504, 505, 502, 506, 
	508, 509, 510, 512, 523, 513, 517, 514, 
	515, 516, 470, 518, 519, 520, 521, 522, 
	470, 524, 525, 526, 470, 528, 529, 530, 
	531, 533, 581, 534, 537, 535, 536, 538, 
	539, 540, 541, 542, 543, 544, 550, 554, 
	544, 545, 545, 546, 547, 548, 545, 549, 
	551, 552, 553, 555, 561, 565, 555, 556, 
	556, 557, 558, 559, 556, 560, 562, 563, 
	564, 566, 577, 567, 571, 568, 569, 570, 
	470, 572, 573, 574, 575, 576, 470, 578, 
	579, 580, 470, 582, 583, 584, 586, 587, 
	588, 298, 589, 591, 592, 593, 594, 594, 
	595, 596, 595, 594, 597, 598, 594, 599, 
	601, 602, 283, 603, 606, 607, 608, 279, 
	609, 611, 612, 613, 614, 615, 616, 617, 
	616, 615, 618, 619, 620, 615, 621, 623, 
	624, 263, 625, 626, 627, 628, 627, 629, 
	628, 629, 630, 1285, 631, 632, 630, 1285, 
	631, 632, 633, 1285, 634, 633, 1285, 634, 
	635, 636, 651, 652, 653, 1051, 637, 637, 
	638, 639, 641, 649, 637, 637, 638, 639, 
	641, 649, 640, 640, 642, 641, 643, 642, 
	643, 644, 637, 645, 646, 644, 637, 645, 
	646, 647, 637, 648, 647, 637, 648, 650, 
	1286, 652, 635, 654, 655, 659, 1037, 699, 
	706, 742, 747, 792, 654, 653, 656, 657, 
	653, 658, 660, 1027, 661, 662, 663, 664, 
	665, 666, 667, 671, 677, 1022, 667, 666, 
	668, 692, 669, 1007, 1011, 1012, 1018, 670, 
	670, 669, 1003, 672, 673, 672, 671, 674, 
	675, 671, 676, 678, 679, 683, 678, 677, 
	680, 681, 677, 682, 684, 685, 686, 687, 
	688, 689, 690, 691, 998, 691, 690, 693, 
	797, 801, 873, 880, 887, 933, 938, 993, 
	693, 694, 694, 695, 696, 697, 694, 698, 
	700, 701, 702, 703, 704, 705, 707, 708, 
	709, 710, 711, 712, 713, 714, 715, 716, 
	720, 715, 714, 717, 718, 714, 719, 721, 
	722, 726, 721, 720, 723, 724, 720, 725, 
	727, 738, 728, 732, 729, 730, 731, 670, 
	733, 734, 735, 736, 737, 670, 739, 740, 
	741, 670, 743, 744, 745, 746, 748, 749, 
	750, 783, 751, 752, 753, 754, 755, 756, 
	757, 761, 756, 755, 758, 759, 755, 760, 
	762, 763, 767, 762, 761, 764, 765, 761, 
	766, 768, 779, 769, 773, 770, 771, 772, 
	670, 774, 775, 776, 777, 778, 670, 780, 
	781, 782, 670, 784, 785, 786, 787, 788, 
	789, 790, 791, 793, 794, 795, 796, 798, 
	799, 800, 802, 808, 803, 804, 805, 806, 
	807, 809, 810, 811, 812, 812, 813, 841, 
	845, 813, 814, 814, 815, 819, 816, 817, 
	814, 818, 820, 821, 825, 820, 819, 822, 
	823, 819, 824, 826, 837, 827, 831, 828, 
	829, 830, 670, 832, 833, 834, 835, 836, 
	670, 838, 839, 840, 670, 842, 843, 844, 
	846, 852, 856, 846, 847, 847, 848, 849, 
	850, 847, 851, 853, 854, 855, 857, 869, 
	858, 863, 859, 860, 861, 862, 862, 864, 
	865, 866, 867, 868, 862, 870, 871, 872, 
	862, 874, 875, 876, 877, 878, 879, 881, 
	882, 883, 884, 885, 886, 888, 889, 890, 
	891, 892, 893, 894, 895, 896, 902, 906, 
	896, 897, 897, 898, 899, 900, 897, 901, 
	903, 904, 905, 907, 913, 917, 907, 908, 
	908, 909, 910, 911, 908, 912, 914, 915, 
	916, 918, 929, 919, 923, 920, 921, 922, 
	862, 924, 925, 926, 927, 928, 862, 930, 
	931, 932, 862, 934, 935, 936, 937, 939, 
	940, 941, 984, 942, 943, 944, 945, 946, 
	947, 953, 957, 947, 948, 948, 949, 950, 
	951, 948, 952, 954, 955, 956, 958, 964, 
	968, 958, 959, 959, 960, 961, 962, 959, 
	963, 965, 966, 967, 969, 980, 970, 974, 
	971, 972, 973, 862, 975, 976, 977, 978, 
	979, 862, 981, 982, 983, 862, 985, 986, 
	987, 988, 989, 990, 991, 992, 994, 995, 
	996, 997, 999, 1000, 1001, 690, 1002, 1004, 
	1005, 670, 1006, 1008, 1009, 1008, 1009, 1009, 
	1010, 1010, 1012, 1013, 1013, 1014, 1015, 1016, 
	1013, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 
	666, 1026, 1028, 1029, 1030, 1031, 1031, 1032, 
	1033, 1032, 1031, 1034, 1035, 1031, 1036, 1038, 
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 
	1045, 1044, 1047, 1048, 1049, 1044, 1050, 1052, 
	1053, 635, 1054, 1288, 1056, 1056, 1056, 1288, 
	1058, 1288, 1059, 1060, 1061, 1288, 1063, 1064, 
	1065, 1066, 1067, 1288, 1069, 1070, 1071, 1072, 
	1073, 1074, 1075, 1076, 1288, 1288, 1079, 1290, 
	1079, 1079, 1288, 1081, 1082, 1288, 1083, 1085, 
	1291, 0, 1086, 1292, 1087, 1087, 1088, 1089, 
	1090, 1092, 1091, 1091, 1091, 1087, 1093, 1094, 
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1105, 
	1151, 1159, 1162, 1100, 1099, 1102, 1103, 1099, 
	1104, 1106, 1293, 1107, 1108, 1110, 1132, 1105, 
	1136, 1137, 1106, 1293, 1107, 1108, 1110, 1132, 
	1136, 1137, 1108, 1109, 1109, 1110, 1110, 1111, 
	1112, 1119, 1123, 1131, 1111, 1110, 1112, 1293, 
	1113, 1114, 1115, 1114, 1112, 1116, 1117, 1112, 
	1118, 1120, 1121, 1110, 1122, 1123, 1123, 1124, 
	1126, 1124, 1123, 1125, 1125, 1110, 1124, 1127, 
	1128, 1129, 1123, 1130, 1110, 1110, 1111, 1112, 
	1119, 1131, 1123, 1133, 1134, 1109, 1135, 1138, 
	1139, 1143, 1144, 1148, 1138, 1137, 1140, 1141, 
	1137, 1142, 1109, 1143, 1145, 1146, 1147, 1149, 
	1150, 1147, 1152, 1153, 1157, 1158, 1152, 1151, 
	1154, 1155, 1151, 1156, 1151, 1152, 1153, 1157, 
	1158, 1158, 1160, 1161, 1163, 1164, 1294, 1166, 
	1166, 1167, 1168, 1169, 1171, 1170, 1170, 1170, 
	1166, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 
	1187, 1188, 1192, 1187, 1186, 1189, 1190, 1186, 
	1191, 1193, 1295, 1194, 1195, 1196, 1229, 1192, 
	1203, 1193, 1295, 1194, 1195, 1196, 1229, 1203, 
	1195, 1193, 1197, 1198, 1199, 1198, 1197, 1200, 
	1201, 1197, 1202, 1203, 1204, 1205, 1209, 1204, 
	1203, 1206, 1207, 1203, 1208, 1210, 1295, 1194, 
	1211, 1212, 1225, 1209, 1210, 1211, 1212, 1225, 
	1211, 1210, 1212, 1213, 1214, 1218, 1213, 1212, 
	1215, 1216, 1212, 1217, 1219, 1220, 1221, 1218, 
	1219, 1220, 1221, 1220, 1219, 1222, 1223, 1219, 
	1224, 1226, 1227, 1210, 1228, 1230, 1231, 1193, 
	1232, 1, 19, 1235, 1236, 1235, 1237, 1238, 
	1239, 1240, 1242, 1235, 1235, 1235, 1235, 21, 
	1235, 24, 1235, 25, 1241, 26, 1243, 1244, 
	1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 
	1253, 1254, 1255, 1256, 1257, 82, 1257, 41, 
	72, 1265, 1266, 1265, 1267, 112, 1265, 1269, 
	1270, 221, 1272, 1273, 1268, 1268, 1268, 1268, 
	222, 1274, 1275, 223, 1277, 1278, 235, 1277, 
	254, 255, 259, 1281, 1281, 1287, 1289, 1077, 
	1078, 1080, 1084, 1062, 1068, 1288, 1055, 1057, 
	1288, 1288
};

static const short _MFileScanner_trans_actions[] = {
	99, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 97, 
	0, 0, 0, 0, 0, 0, 95, 0, 
	5, 185, 127, 0, 466, 0, 242, 0, 
	125, 410, 123, 0, 0, 107, 0, 0, 
	33, 0, 11, 326, 0, 15, 0, 0, 
	0, 245, 0, 0, 0, 257, 0, 23, 
	0, 0, 470, 0, 0, 105, 135, 0, 
	254, 0, 0, 0, 0, 19, 17, 0, 
	251, 0, 0, 0, 260, 0, 23, 0, 
	0, 137, 0, 0, 0, 191, 0, 0, 
	1, 0, 23, 0, 0, 191, 0, 0, 
	1, 0, 0, 0, 419, 522, 0, 419, 
	0, 23, 0, 0, 531, 0, 0, 105, 
	522, 0, 0, 0, 0, 0, 0, 0, 
	0, 129, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 431, 
	143, 0, 0, 269, 0, 0, 35, 0, 
	266, 0, 0, 37, 37, 0, 356, 0, 
	11, 0, 263, 161, 0, 413, 155, 0, 
	290, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 15, 0, 15, 0, 0, 281, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 11, 15, 0, 15, 0, 
	0, 278, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 284, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 11, 15, 0, 15, 0, 0, 
	275, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 287, 0, 296, 
	159, 293, 157, 0, 0, 0, 145, 0, 
	21, 0, 302, 0, 0, 0, 0, 299, 
	0, 0, 167, 0, 0, 308, 0, 305, 
	0, 39, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 194, 0, 0, 197, 
	0, 0, 1, 0, 0, 0, 0, 209, 
	0, 0, 212, 0, 0, 67, 0, 69, 
	0, 215, 0, 23, 0, 0, 0, 191, 
	23, 0, 0, 0, 0, 0, 0, 191, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 61, 362, 0, 0, 61, 
	61, 490, 0, 0, 0, 454, 0, 191, 
	0, 23, 0, 23, 0, 0, 0, 0, 
	191, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 61, 362, 61, 61, 442, 
	23, 0, 0, 0, 0, 0, 0, 191, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 191, 0, 0, 1, 0, 23, 
	0, 0, 0, 191, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 49, 0, 0, 
	0, 47, 0, 0, 0, 0, 0, 23, 
	0, 0, 191, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 23, 0, 0, 0, 
	191, 0, 0, 1, 0, 23, 0, 0, 
	0, 191, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 45, 0, 0, 
	0, 0, 0, 43, 0, 0, 0, 41, 
	0, 0, 0, 63, 368, 63, 63, 446, 
	63, 63, 63, 203, 63, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 53, 0, 23, 0, 0, 0, 
	191, 0, 0, 0, 0, 0, 1, 0, 
	23, 0, 0, 0, 191, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	59, 0, 0, 0, 0, 0, 57, 0, 
	0, 0, 55, 0, 0, 0, 23, 0, 
	0, 0, 191, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 59, 0, 0, 0, 0, 
	0, 0, 57, 0, 0, 0, 55, 0, 
	0, 0, 0, 0, 0, 0, 0, 23, 
	0, 0, 0, 191, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 23, 0, 0, 
	0, 191, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 51, 0, 0, 0, 0, 0, 
	49, 0, 0, 0, 47, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 23, 0, 0, 
	0, 191, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 23, 0, 0, 0, 191, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	45, 0, 0, 0, 0, 0, 43, 0, 
	0, 0, 41, 0, 0, 0, 61, 61, 
	61, 200, 61, 0, 0, 0, 53, 0, 
	23, 0, 0, 191, 0, 0, 1, 0, 
	0, 0, 1, 0, 61, 61, 61, 359, 
	61, 0, 0, 0, 0, 63, 368, 63, 
	63, 494, 63, 63, 63, 365, 63, 0, 
	0, 1, 0, 0, 11, 377, 0, 377, 
	0, 0, 13, 482, 13, 13, 0, 221, 
	0, 0, 11, 478, 11, 0, 218, 0, 
	0, 224, 0, 23, 0, 0, 71, 506, 
	71, 71, 380, 380, 0, 227, 0, 0, 
	11, 11, 1, 0, 377, 0, 377, 0, 
	0, 13, 482, 13, 13, 0, 221, 0, 
	0, 11, 478, 11, 0, 218, 0, 0, 
	73, 0, 191, 23, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 191, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 23, 0, 0, 0, 0, 191, 
	0, 0, 0, 458, 0, 23, 0, 191, 
	0, 23, 0, 23, 0, 0, 191, 0, 
	0, 1, 0, 23, 0, 0, 0, 191, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 65, 374, 65, 65, 450, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 191, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 0, 
	0, 0, 191, 0, 0, 1, 0, 23, 
	0, 0, 0, 191, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 49, 0, 0, 
	0, 47, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 23, 
	0, 0, 0, 191, 0, 0, 1, 0, 
	23, 0, 0, 0, 191, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	45, 0, 0, 0, 0, 0, 43, 0, 
	0, 0, 41, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 53, 0, 23, 0, 
	0, 0, 191, 0, 0, 0, 0, 0, 
	1, 0, 23, 0, 0, 0, 191, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 59, 0, 0, 0, 0, 0, 
	57, 0, 0, 0, 55, 0, 0, 0, 
	23, 0, 0, 0, 191, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 59, 0, 0, 
	0, 0, 0, 0, 57, 0, 0, 0, 
	55, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 23, 0, 0, 
	0, 191, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 23, 0, 0, 0, 191, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	51, 0, 0, 0, 0, 0, 49, 0, 
	0, 0, 47, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 191, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 23, 0, 
	0, 0, 191, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 45, 0, 0, 0, 0, 
	0, 43, 0, 0, 0, 41, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 65, 65, 65, 206, 65, 0, 
	0, 1, 0, 71, 335, 0, 23, 0, 
	191, 0, 0, 191, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 53, 0, 23, 
	0, 0, 191, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 65, 374, 65, 
	65, 498, 65, 65, 65, 371, 65, 0, 
	0, 1, 0, 181, 19, 17, 0, 311, 
	0, 183, 0, 0, 0, 175, 0, 0, 
	0, 0, 0, 173, 0, 0, 0, 0, 
	0, 0, 0, 0, 171, 317, 19, 536, 
	17, 0, 474, 0, 0, 314, 0, 0, 
	0, 75, 0, 332, 0, 1, 0, 0, 
	0, 0, 19, 17, 0, 188, 0, 0, 
	0, 0, 0, 0, 0, 23, 0, 11, 
	0, 11, 11, 0, 191, 0, 0, 1, 
	0, 486, 510, 79, 389, 392, 79, 0, 
	79, 350, 9, 236, 0, 23, 81, 0, 
	0, 77, 0, 191, 0, 0, 25, 23, 
	9, 0, 0, 11, 0, 191, 0, 233, 
	0, 23, 0, 0, 191, 0, 0, 1, 
	0, 0, 0, 1, 0, 9, 323, 320, 
	9, 9, 526, 25, 0, 438, 0, 9, 
	9, 9, 434, 9, 27, 344, 341, 338, 
	27, 0, 27, 0, 0, 1, 0, 23, 
	0, 11, 11, 11, 0, 462, 0, 0, 
	230, 0, 79, 0, 0, 0, 383, 0, 
	0, 386, 23, 0, 11, 0, 0, 191, 
	0, 0, 1, 0, 29, 347, 29, 0, 
	29, 9, 0, 0, 0, 0, 83, 0, 
	1, 0, 0, 0, 0, 19, 17, 0, 
	188, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 11, 0, 191, 0, 0, 1, 
	0, 91, 518, 91, 401, 91, 91, 0, 
	404, 0, 239, 0, 23, 0, 0, 87, 
	0, 191, 0, 23, 0, 0, 191, 0, 
	0, 1, 0, 0, 23, 0, 11, 0, 
	191, 0, 0, 1, 0, 85, 514, 85, 
	395, 398, 85, 0, 0, 23, 89, 0, 
	0, 191, 0, 23, 0, 11, 0, 191, 
	0, 0, 1, 0, 85, 395, 85, 0, 
	0, 23, 0, 0, 191, 0, 0, 1, 
	0, 0, 0, 1, 0, 0, 0, 1, 
	0, 93, 3, 113, 0, 248, 0, 416, 
	105, 105, 105, 109, 111, 115, 121, 0, 
	119, 353, 117, 31, 105, 31, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 131, 0, 133, 0, 
	0, 139, 422, 272, 0, 21, 141, 0, 
	105, 0, 105, 0, 149, 153, 147, 151, 
	0, 0, 105, 0, 163, 425, 21, 165, 
	11, 11, 11, 329, 69, 502, 428, 0, 
	23, 0, 0, 0, 0, 177, 0, 0, 
	179, 169
};

static const short _MFileScanner_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 101, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 101, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 101, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 101, 101, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 101, 101, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 101, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 101, 101, 101, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 407, 0, 0, 0, 0, 0, 0, 
	0, 407, 0, 0, 101, 0, 0, 0, 
	0, 0, 0, 0, 101, 407, 0, 0, 
	101, 101, 0, 0, 0, 101, 0, 0, 
	407, 0, 0, 0, 0, 0, 0, 0
};

static const short _MFileScanner_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 103, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 103, 0, 0, 0, 0, 0, 0, 
	0, 103, 0, 0, 103, 0, 0, 0, 
	0, 0, 0, 0, 103, 103, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	103, 0, 0, 0, 0, 0, 0, 0
};

static const short _MFileScanner_eof_actions[] = {
	0, 99, 0, 0, 0, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 75, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 7, 7, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 7, 0, 0
};

static const short _MFileScanner_eof_trans[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 27, 27, 27, 
	33, 35, 35, 33, 33, 33, 33, 33, 
	33, 33, 33, 0, 0, 0, 0, 0, 
	0, 63, 0, 0, 0, 0, 0, 0, 
	0, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	63, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	153, 153, 153, 153, 153, 153, 153, 153, 
	153, 153, 153, 172, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 175, 175, 175, 
	175, 175, 175, 175, 175, 0, 289, 291, 
	291, 291, 291, 0, 0, 0, 0, 0, 
	0, 0, 0, 307, 307, 307, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1348, 
	1348, 1348, 1354, 1354, 1354, 1354, 1354, 1354, 
	1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 
	1354, 1354, 1354, 1354, 1354, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1654, 1655, 1655, 1655, 
	1657, 1659, 1657, 1657, 1657, 1657, 1657, 1657, 
	1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 
	1657, 0, 1679, 1679, 1679, 1679, 1679, 1679, 
	1679, 0, 1687, 1687, 0, 1693, 1694, 1695, 
	1696, 1693, 1693, 1693, 0, 0, 1704, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1718, 1718, 1721, 0, 0, 0, 0
};

static const int MFileScanner_start = 1233;
static const int MFileScanner_first_final = 1233;
static const int MFileScanner_error = 0;

static const int MFileScanner_en_in_comment_block = 1234;
static const int MFileScanner_en_funcline = 1235;
static const int MFileScanner_en_funcbody = 1257;
static const int MFileScanner_en_fill_list = 1265;
static const int MFileScanner_en_doxy_get_body = 1268;
static const int MFileScanner_en_doxyfunction_garble = 1276;
static const int MFileScanner_en_doxy_get_brief = 1277;
static const int MFileScanner_en_doxyheader = 238;
static const int MFileScanner_en_events = 1280;
static const int MFileScanner_en_methods = 1281;
static const int MFileScanner_en_methodsheader = 263;
static const int MFileScanner_en_property = 1285;
static const int MFileScanner_en_properties = 635;
static const int MFileScanner_en_classbody = 1288;
static const int MFileScanner_en_expect_doxyblock = 1086;
static const int MFileScanner_en_funct = 1087;
static const int MFileScanner_en_script = 1165;
static const int MFileScanner_en_class = 1166;
static const int MFileScanner_en_class_classdef = 1178;
static const int MFileScanner_en_main = 1233;


#line 1162 "mfilescanner.rl"


void MFileScanner :: print_function_synopsis()
{
  if(is_getter_ || is_setter_)
  {
   cout << "/*\n";
  }
  if(is_class_ && class_part_ == Method)
    cout << methodparams_.ccprefix();

  // no return values?
  if(!opt)
  {
    cout << "noret::substitute ";
    opt=false;
  }
  else
  {
    // do we have a constructor?
    if(is_class_ && (cfuncname_ == classname_))
      returnlist_.clear();
    else{
      if(returnlist_.size() == 1)
        cout << "ret::substitutestart::" << returnlist_[0] << "::retsubstituteend ";
      else
      {
        cout << "rets::substitutestart::";
        for(size_t i=0; i<returnlist_.size(); ++i)
        {
          cout << returnlist_[i] << "::";
        }
        cout << "retssubstituteend ";
      }
    }
  }
  if(!is_first_function_)
    cout << "mtoc_subst_" << fnname_ << "_tsbus_cotm_";
  cout << cfuncname_;
}

void MFileScanner :: print_access_specifier(AccessEnum & access)
{
  if(access == Public)
    cout << "public:\n";
  else if(access == Protected)
    cout << "protected:\n";
  else if(access == Private)
    cout << "private:\n";
}

// constructor
MFileScanner :: MFileScanner(istream & fin, const std::string & filename,
                             const std::string & conffilename, bool latex_output) :
  fin_(fin), filename_(filename),
  latex_output_(latex_output), cscan_(filename_, conffilename),
  fnname_(filename),
  line(1),
  ts(0), have(0), top(0),
  opt(false), new_syntax_(false),
  is_script_(false), is_first_function_(true),
  is_class_(false), is_setter_(false), is_getter_(false),
  classname_(), funcindent_(0), eventindent_(0),
  class_part_(Header),
  access_(), propertyparams_(), methodparams_(), property_list_()
{
  string::size_type found = fnname_.rfind("/");
  if(found != string::npos)
    fnname_ = fnname_.substr(found+1);
  for( std::string::size_type i = 0; i < fnname_.size(); ++i )
  {
    if(fnname_[i] == '@')
      fnname_[i] = '_';
    else if(fnname_[i] == '.')
      fnname_[i] = '_';
  }

  cscan_.execute();
};

// run the scanner
int MFileScanner :: execute()
{
  std::ios::sync_with_stdio(false);

  
#line 3187 "mfilescanner.cc"
	{
	cs = MFileScanner_start;
	top = 0;
	ts = 0;
	te = 0;
	act = 0;
	}

#line 1248 "mfilescanner.rl"

  /* Do the first read. */
  bool done = false;
  while ( !done )
  {
    char *p = buf + have;
    char *tmp_p = p, *tmp_p2 = p, *tmp_p3 = p;
    string tmp_string;
    bool docline = false;
    bool latex_begin = true;
    int space = BUFSIZE - have;

    if ( space == 0 )
    {
      /* We filled up the buffer trying to scan a token. */
      cerr << "OUT OF BUFFER SPACE" << endl;
      exit(-1);
    }

    fin_.read( p, space );
    int len = fin_.gcount();
    char *pe = p + len;
    char *rpe = pe;
    char *eof = 0;

    /* If we see eof then append the EOF char. */
    if ( fin_.eof() )
    {
      char eof_c = *pe;
      *pe = '\n';
      pe++;
      *pe = eof_c;
      eof = pe;
      rpe = pe;

      done = true;
    }
    else
    {
      /* Find the last newline by searching backwards. This is where
       * we will stop processing on this iteration. */
      while ( pe >= p )
      {
        if( *pe != '\n')
          pe--;
        else
        {
          if(pe >= p+3
              && *(pe-1) == '.' && *(pe-2) == '.' && *(pe-3) == '.')
            pe-=3;
          else
            break;
        }
      }
    }

    
#line 3254 "mfilescanner.cc"
	{
	int _klen;
	unsigned int _trans;
	const unsigned char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _MFileScanner_actions + _MFileScanner_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 75:
#line 1 "mfilescanner.rl"
	{ts = p;}
	break;
#line 3275 "mfilescanner.cc"
		}
	}

	_keys = _MFileScanner_trans_keys + _MFileScanner_key_offsets[cs];
	_trans = _MFileScanner_index_offsets[cs];

	_klen = _MFileScanner_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _MFileScanner_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _MFileScanner_indicies[_trans];
_eof_trans:
	cs = _MFileScanner_trans_targs[_trans];

	if ( _MFileScanner_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _MFileScanner_actions + _MFileScanner_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 33 "mfilescanner.rl"
	{line++;}
	break;
	case 1:
#line 40 "mfilescanner.rl"
	{ tmp_p = p+1; cout << " *"; }
	break;
	case 2:
#line 43 "mfilescanner.rl"
	{ cout.write(tmp_p, p - tmp_p+1); }
	break;
	case 3:
#line 45 "mfilescanner.rl"
	{
    cout << "*/\n";
    p--;
    {cs = stack[--top]; goto _again;}
  }
	break;
	case 5:
#line 60 "mfilescanner.rl"
	{
    cout.write(tmp_p, p-tmp_p+1);
    {stack[top++] = cs; cs = 1234; goto _again;}
  }
	break;
	case 6:
#line 65 "mfilescanner.rl"
	{ cout << (*p); }
	break;
	case 7:
#line 67 "mfilescanner.rl"
	{ tmp_p = p; }
	break;
	case 8:
#line 69 "mfilescanner.rl"
	{ cout.write(tmp_p, p - tmp_p); }
	break;
	case 9:
#line 71 "mfilescanner.rl"
	{ tmp_string.assign(tmp_p, p-tmp_p); }
	break;
	case 10:
#line 95 "mfilescanner.rl"
	{ cout << "/**"; tmp_p = p+1; }
	break;
	case 11:
#line 98 "mfilescanner.rl"
	{ cout << "/*"; tmp_p = p; }
	break;
	case 12:
#line 109 "mfilescanner.rl"
	{ tmp_p = p + 1; }
	break;
	case 13:
#line 114 "mfilescanner.rl"
	{
        cout << "/* ";
        cout.write(tmp_p, p - tmp_p) << "*/\n";
      }
	break;
	case 14:
#line 122 "mfilescanner.rl"
	{ tmp_p = p+1; }
	break;
	case 15:
#line 141 "mfilescanner.rl"
	{if(*p=='\n' || paramlist_.size() != 1 || paramlist_[0] != string("this" )) {
         cout << *p;
         } }
	break;
	case 16:
#line 149 "mfilescanner.rl"
	{
         string s(tmp_p, p - tmp_p);
         bool addBlock = true;
         // do not print this pointer
         if( is_class_ && class_part_ == Method && (cfuncname_ != classname_) ) {
            if(paramlist_.empty()) {
              addBlock = false;
              paramlist_.push_back(string("this"));
            }
            else if(paramlist_.size() == 1 && paramlist_[0] == string("this"))
              paramlist_.clear();
         }

         if(addBlock) {

#ifdef DEBUG
  cerr << "found parameter: " << s << endl;
#endif
           cout << "matlabtypesubstitute " << s;
           // add an empty docu block for parameter \a s
           param_list_[s] = DocuBlock();
           paramlist_.push_back(s);
         }
       }
	break;
	case 17:
#line 181 "mfilescanner.rl"
	{
            string s(tmp_p, p - tmp_p);
            returnlist_.push_back(s);
            // add an empty docu block for return value \a s
            return_list_[s] = DocuBlock();
          }
	break;
	case 18:
#line 198 "mfilescanner.rl"
	{
             string s(tmp_p, p - tmp_p);
             returnlist_.push_back(s);
             // add an empty docu block for single return value \a s
             return_list_[s] = DocuBlock();
           }
	break;
	case 19:
#line 224 "mfilescanner.rl"
	{ tmp_p = p + 1; }
	break;
	case 20:
#line 230 "mfilescanner.rl"
	{tmp_string.assign(ts,p-ts);}
	break;
	case 21:
#line 233 "mfilescanner.rl"
	{tmp_p2 = p;}
	break;
	case 22:
#line 274 "mfilescanner.rl"
	{tmp_string.assign(ts,p-ts);}
	break;
	case 23:
#line 334 "mfilescanner.rl"
	{tmp_string.assign("");}
	break;
	case 24:
#line 457 "mfilescanner.rl"
	{tmp_p3 = p;}
	break;
	case 25:
#line 457 "mfilescanner.rl"
	{tmp_p2 = p;}
	break;
	case 26:
#line 748 "mfilescanner.rl"
	{ {cs = 1277; goto _again;} }
	break;
	case 27:
#line 751 "mfilescanner.rl"
	{ {cs = 1276; goto _again;} }
	break;
	case 28:
#line 755 "mfilescanner.rl"
	{
#if DEBUG
        cerr << "doxy_get_brief" << endl;
#endif
        p = tmp_p - 2;
        {cs = 1277; goto _again;}
      }
	break;
	case 29:
#line 768 "mfilescanner.rl"
	{ access_.full = Public;
               access_.set = Public;
             }
	break;
	case 30:
#line 772 "mfilescanner.rl"
	{ access_.full =
                 (access_.get == Public ? Public : Protected );
               access_.set = Protected;
             }
	break;
	case 31:
#line 777 "mfilescanner.rl"
	{ access_.full = access_.get;
               access_.set = Private;
             }
	break;
	case 32:
#line 784 "mfilescanner.rl"
	{ access_.full = Public;
               access_.get = Public;
             }
	break;
	case 33:
#line 788 "mfilescanner.rl"
	{ access_.full =
                 (access_.set == Public ? Public : Protected );
               access_.get = Protected;
             }
	break;
	case 34:
#line 793 "mfilescanner.rl"
	{ access_.full = access_.set;
               access_.get = Private;
             }
	break;
	case 35:
#line 798 "mfilescanner.rl"
	{ cerr << "access" << endl; }
	break;
	case 36:
#line 800 "mfilescanner.rl"
	{ access_.full = Public;
               access_.get = Public;
               access_.set = Public;
             }
	break;
	case 37:
#line 805 "mfilescanner.rl"
	{ access_.full = Protected;
               access_.get = Protected;
               access_.set = Protected;
             }
	break;
	case 38:
#line 810 "mfilescanner.rl"
	{ access_.full = Private;
               access_.get = Private;
               access_.set = Private;
             }
	break;
	case 39:
#line 823 "mfilescanner.rl"
	{
           methodparams_.abstr = true;
         }
	break;
	case 40:
#line 827 "mfilescanner.rl"
	{
           methodparams_.statical = true;
         }
	break;
	case 41:
#line 838 "mfilescanner.rl"
	{
           propertyparams_.constant = true;
         }
	break;
	case 42:
#line 863 "mfilescanner.rl"
	{ tmp_string.assign(tmp_p, p - tmp_p);
                if(tmp_string.find("e") == eventindent_)
                  {
                  cerr << "5: goto classbody" << endl;
                  {cs = 1288; goto _again;}
                  }
              }
	break;
	case 43:
#line 875 "mfilescanner.rl"
	{ cout << "\n"; }
	break;
	case 44:
#line 877 "mfilescanner.rl"
	{
        tmp_string.assign(tmp_p, p - tmp_p+1);
        funcindent_ = tmp_string.find("f");
#if DEBUG
    cerr << tmp_string << endl;
    cerr << "funcindent: " << funcindent_ << endl;
#endif
        p--;
        {cs = 1087; goto _again;}
       }
	break;
	case 45:
#line 889 "mfilescanner.rl"
	{
         cerr << "6: goto classbody" << endl;
         {cs = 1288; goto _again;}
       }
	break;
	case 46:
#line 897 "mfilescanner.rl"
	{ print_access_specifier(access_.full); {cs = 1281; goto _again;} }
	break;
	case 47:
#line 900 "mfilescanner.rl"
	{
            string s(tmp_p, p - tmp_p);
            property_list_.push_back(s);
            cout << propertyparams_.ccprefix() << " " << s;
            }
	break;
	case 48:
#line 908 "mfilescanner.rl"
	{
            cout << "\n/** @var " << property_list_.back() << "\n" << " * ";
            cout.write(tmp_p, p-tmp_p);
            cout << "*/\n";
          }
	break;
	case 49:
#line 912 "mfilescanner.rl"
	{ cout << "\n";}
	break;
	case 50:
#line 918 "mfilescanner.rl"
	{cerr << "eol" << endl;}
	break;
	case 51:
#line 922 "mfilescanner.rl"
	{ cout << "\n";}
	break;
	case 52:
#line 923 "mfilescanner.rl"
	{
            print_access_specifier(access_.full);
          }
	break;
	case 53:
#line 927 "mfilescanner.rl"
	{
        cerr << "back to classbody" << endl;
         {cs = 1288; goto _again;}
       }
	break;
	case 54:
#line 982 "mfilescanner.rl"
	{
        //cout << "/*";
        p--;
        {cs = 238; goto _again;}
      }
	break;
	case 55:
#line 988 "mfilescanner.rl"
	{
    p--;
    if(is_class_)
    {
      if(class_part_ == Header)
      {
        end_of_class_doc();
        cerr << "1: goto classbody\n";
        {cs = 1288; goto _again;}
      } else if(class_part_ == Method)
        {cs = 1257; goto _again;}
      else if(class_part_ == Property)
      {
        end_of_property_doc();
        {cs = 1285; goto _again;}
      }
    }
    else
      {cs = 1257; goto _again;}
  }
	break;
	case 56:
#line 1014 "mfilescanner.rl"
	{opt=true;}
	break;
	case 57:
#line 1016 "mfilescanner.rl"
	{is_getter_ = true;}
	break;
	case 58:
#line 1016 "mfilescanner.rl"
	{is_setter_=true;}
	break;
	case 59:
#line 1019 "mfilescanner.rl"
	{
            cfuncname_.assign(tmp_p, p - tmp_p);
            is_script_ = false;
          }
	break;
	case 60:
#line 1027 "mfilescanner.rl"
	{
                 print_function_synopsis();
                 cout << '(';
                 }
	break;
	case 61:
#line 1036 "mfilescanner.rl"
	{
             if(is_class_ && class_part_ == Method)
               cout << methodparams_.ccpostfix() << "\n";
             else
               cout << " {\n";
             // check for documentation block
             {cs = 1086; goto _again;}
           }
	break;
	case 62:
#line 1045 "mfilescanner.rl"
	{
                          print_function_synopsis();
                         cout << "() {\n";
#if DEBUG
  cerr << "in funcdef: no parameters: expect doxyblock" << endl;
#endif
                         {cs = 1086; goto _again;}
                        }
	break;
	case 63:
#line 1068 "mfilescanner.rl"
	{
       string :: size_type found = filename_.rfind("/");
       if(found == string :: npos)
         found = -1;
       string funcname = filename_.substr(found+1, filename_.size()-3-found);
       cfuncname_.assign( funcname );
       cout << "noret::substitute ";
       if(!is_first_function_)
         cout << "mtoc_subst_" << fnname_ << "_tsbus_cotm_";
       cout << funcname << "() {\n";
       is_script_ = true;
       p--;
       {cs = 1086; goto _again;}
     }
	break;
	case 64:
#line 1090 "mfilescanner.rl"
	{
             cout << "public ";
             cout.write(tmp_p, p - tmp_p);
           }
	break;
	case 65:
#line 1096 "mfilescanner.rl"
	{ cout << "\n  :"; }
	break;
	case 66:
#line 1097 "mfilescanner.rl"
	{ cout << ",\n   "; }
	break;
	case 67:
#line 1104 "mfilescanner.rl"
	{
            classname_.assign(tmp_p, p - tmp_p);
            is_class_ = true;
            cout << "class " << classname_;
          }
	break;
	case 68:
#line 1116 "mfilescanner.rl"
	{
        cout << " {\n";
        {cs = 1086; goto _again;}
      }
	break;
	case 69:
#line 1137 "mfilescanner.rl"
	{ p--; tmp_p = p; }
	break;
	case 70:
#line 1143 "mfilescanner.rl"
	{
                     p=tmp_p;
                     {cs = 1087; goto _again;}
                    }
	break;
	case 71:
#line 1147 "mfilescanner.rl"
	{
                     p=tmp_p;
                     {cs = 1178; goto _again;}
                    }
	break;
	case 72:
#line 1152 "mfilescanner.rl"
	{
    cerr << "goto script" << endl;
    p=tmp_p;
    {cs = 1165; goto _again;}
  }
	break;
	case 76:
#line 1 "mfilescanner.rl"
	{te = p+1;}
	break;
	case 77:
#line 222 "mfilescanner.rl"
	{te = p+1;{ cout.write(ts, te-ts); }}
	break;
	case 78:
#line 224 "mfilescanner.rl"
	{te = p+1;}
	break;
	case 79:
#line 237 "mfilescanner.rl"
	{te = p+1;{
      p--;
      // store fieldname
      string s(tmp_p, tmp_p2 - tmp_p);
      cout << tmp_string << "." << s << "=";
      // typedef of iterators
      typedef DocuList     :: iterator list_iterator;
      typedef DocuListMap  :: iterator map_iterator;
      typedef DocuBlock    :: iterator iterator;

      // check wether first IDENT is a return value
      iterator it = find(returnlist_.begin(), returnlist_.end(), tmp_string);
      if(it != returnlist_.end())
      {
        // if it is a return value...
        // ... check wether its found field is still missing a DocuBlock in the
        // retval list.
        bool missing = true;
        map_iterator rvoit = retval_list_.find(tmp_string);
        if(rvoit != retval_list_.end())
        {
          list_iterator lit = (*rvoit).second.find(s);
          if(lit != (*rvoit).second.end())
            missing = false;
        }
        // if it is missing, add an empty docu block
        if(missing)
        {
          retval_list_[tmp_string][s] = DocuBlock();
        }
      }
    }}
	break;
	case 80:
#line 345 "mfilescanner.rl"
	{te = p+1;{
        string s;
        if(tmp_string.empty())
        {
          s.assign("@deprecated function deprecated\n");
        }
        else
        {
          s.assign("@deprecated method deprecated, use \'" + tmp_string + "\' instead.\n");
        }
        docuextra_.push_back(s);
        p--;
      }}
	break;
	case 81:
#line 366 "mfilescanner.rl"
	{te = p+1;{ cout << '['; }}
	break;
	case 82:
#line 369 "mfilescanner.rl"
	{te = p+1;{ cout << ']'; }}
	break;
	case 83:
#line 373 "mfilescanner.rl"
	{te = p+1;{ cout << (*p); }}
	break;
	case 84:
#line 377 "mfilescanner.rl"
	{te = p+1;{ cout << (*p); {cs = 1257; goto _again;} }}
	break;
	case 85:
#line 219 "mfilescanner.rl"
	{te = p;p--;{ cout.write(ts, te-ts); }}
	break;
	case 86:
#line 281 "mfilescanner.rl"
	{te = p;p--;{
      // store fieldname
      string s(tmp_p, p - tmp_p+1);
      cout << tmp_string << "." << s;
      typedef DocuList     :: iterator list_iterator;
      typedef DocuListMap  :: iterator map_iterator;
      typedef DocuBlock    :: iterator iterator;

      // check wether first IDENT is a parameter
      iterator it = find(paramlist_.begin(), paramlist_.end(), tmp_string);
      if(it != paramlist_.end())
      {
        // if it is a parameter ...
        // ... check wether its found field is still missing a DocuBlock in the
        // return, optional and the required list.
        bool missing = true;
        map_iterator rvoit = retval_list_.find(tmp_string);
        if(rvoit != retval_list_.end())
        {
          list_iterator lit = (*rvoit).second.find(s);
          // found match in retval list
          if(lit != (*rvoit).second.end())
            missing = false;
        }
        map_iterator moit = optional_list_.find(tmp_string);
        if(moit != optional_list_.end())
        {
          // found match in optional list
          list_iterator lit = (*moit).second.find(s);
          if(lit != (*moit).second.end())
            missing = false;
        }
        map_iterator roit = required_list_.find(tmp_string);
        if(roit != required_list_.end())
        {
          // found match in required list
          list_iterator lit = (*roit).second.find(s);
          if(lit != (*roit).second.end())
            missing = false;
        }
        // in case it IS missing, add an empty field to the required block.
        if(missing)
        {
          required_list_[tmp_string][s] = DocuBlock();
        }
      }
    }}
	break;
	case 87:
#line 361 "mfilescanner.rl"
	{te = p;p--;{ cout.write(ts, te-ts); }}
	break;
	case 88:
#line 373 "mfilescanner.rl"
	{te = p;p--;{ cout << (*p); }}
	break;
	case 89:
#line 281 "mfilescanner.rl"
	{{p = ((te))-1;}{
      // store fieldname
      string s(tmp_p, p - tmp_p+1);
      cout << tmp_string << "." << s;
      typedef DocuList     :: iterator list_iterator;
      typedef DocuListMap  :: iterator map_iterator;
      typedef DocuBlock    :: iterator iterator;

      // check wether first IDENT is a parameter
      iterator it = find(paramlist_.begin(), paramlist_.end(), tmp_string);
      if(it != paramlist_.end())
      {
        // if it is a parameter ...
        // ... check wether its found field is still missing a DocuBlock in the
        // return, optional and the required list.
        bool missing = true;
        map_iterator rvoit = retval_list_.find(tmp_string);
        if(rvoit != retval_list_.end())
        {
          list_iterator lit = (*rvoit).second.find(s);
          // found match in retval list
          if(lit != (*rvoit).second.end())
            missing = false;
        }
        map_iterator moit = optional_list_.find(tmp_string);
        if(moit != optional_list_.end())
        {
          // found match in optional list
          list_iterator lit = (*moit).second.find(s);
          if(lit != (*moit).second.end())
            missing = false;
        }
        map_iterator roit = required_list_.find(tmp_string);
        if(roit != required_list_.end())
        {
          // found match in required list
          list_iterator lit = (*roit).second.find(s);
          if(lit != (*roit).second.end())
            missing = false;
        }
        // in case it IS missing, add an empty field to the required block.
        if(missing)
        {
          required_list_[tmp_string][s] = DocuBlock();
        }
      }
    }}
	break;
	case 90:
#line 361 "mfilescanner.rl"
	{{p = ((te))-1;}{ cout.write(ts, te-ts); }}
	break;
	case 91:
#line 373 "mfilescanner.rl"
	{{p = ((te))-1;}{ cout << (*p); }}
	break;
	case 92:
#line 411 "mfilescanner.rl"
	{act = 15;}
	break;
	case 93:
#line 387 "mfilescanner.rl"
	{te = p+1;{
          new_syntax_ = true;
          cout << "*/\n"; //cout << "add to special group */\n";
        }}
	break;
	case 94:
#line 394 "mfilescanner.rl"
	{te = p+1;{
          cout.write(tmp_p, p - tmp_p+1);
          {stack[top++] = cs; cs = 1234; goto _again;}
        }}
	break;
	case 95:
#line 401 "mfilescanner.rl"
	{te = p+1;{ cout << '\n'; }}
	break;
	case 96:
#line 411 "mfilescanner.rl"
	{te = p+1;{
          p = ts-1;
          // further parse the function body line
          {cs = 1235; goto _again;}
        }}
	break;
	case 97:
#line 419 "mfilescanner.rl"
	{te = p+1;{
              if(is_class_ && class_part_ == Method)
              {
                tmp_string.assign(ts,p-ts+1);
                if(tmp_string.find("e") == funcindent_)
                {
                  end_function();
                  cerr << "2: goto methods" << endl;
                  {cs = 1281; goto _again;}
                }
              }
              // else
              p=ts-1;
              // further parse the function body line
              {cs = 1235; goto _again;}
          }}
	break;
	case 98:
#line 438 "mfilescanner.rl"
	{te = p+1;{
        p = ts-1;
        // end the previous function if existent
        end_function();
        {cs = 1233; goto _again;}
      }}
	break;
	case 99:
#line 445 "mfilescanner.rl"
	{te = p+1;}
	break;
	case 100:
#line 411 "mfilescanner.rl"
	{te = p;p--;{
          p = ts-1;
          // further parse the function body line
          {cs = 1235; goto _again;}
        }}
	break;
	case 101:
#line 411 "mfilescanner.rl"
	{{p = ((te))-1;}{
          p = ts-1;
          // further parse the function body line
          {cs = 1235; goto _again;}
        }}
	break;
	case 102:
#line 1 "mfilescanner.rl"
	{	switch( act ) {
	case 0:
	{{cs = 0; goto _again;}}
	break;
	case 15:
	{{p = ((te))-1;}
          p = ts-1;
          // further parse the function body line
          {cs = 1235; goto _again;}
        }
	break;
	}
	}
	break;
	case 103:
#line 491 "mfilescanner.rl"
	{act = 22;}
	break;
	case 104:
#line 460 "mfilescanner.rl"
	{te = p+1;{
      tmp_string.assign(tmp_p3, tmp_p2 - tmp_p3);
      //    std::cout << tmp_string << '\n';
      (*clist_)[tmp_string].push_back(string(tmp_p+1, p - tmp_p));
    }}
	break;
	case 105:
#line 479 "mfilescanner.rl"
	{te = p+1;{
      string s(tmp_p, p - tmp_p + 1);
      (*clist_)[tmp_string].push_back(s);
      /*cout << "add something results in\n" << (*clist_)[tmp_string];*/
    }}
	break;
	case 106:
#line 487 "mfilescanner.rl"
	{te = p+1;{ /*cout << "empty line\n";*/ {cs = stack[--top]; goto _again;} }}
	break;
	case 107:
#line 491 "mfilescanner.rl"
	{te = p+1;{
      p =ts-1;
      // cout << "*/\n";
      {cs = stack[--top]; goto _again;}
    }}
	break;
	case 108:
#line 491 "mfilescanner.rl"
	{te = p;p--;{
      p =ts-1;
      // cout << "*/\n";
      {cs = stack[--top]; goto _again;}
    }}
	break;
	case 109:
#line 1 "mfilescanner.rl"
	{	switch( act ) {
	case 0:
	{{cs = 0; goto _again;}}
	break;
	case 22:
	{{p = ((te))-1;}
      p =ts-1;
      // cout << "*/\n";
      {cs = stack[--top]; goto _again;}
    }
	break;
	}
	}
	break;
	case 110:
#line 510 "mfilescanner.rl"
	{te = p+1;{
        //cout << tmp_string << '\n';
        clist_ = &(required_list_[tmp_string]);
        docline = false;
        {stack[top++] = cs; cs = 1265; goto _again;}
      }}
	break;
	case 111:
#line 524 "mfilescanner.rl"
	{te = p+1;{
        clist_ = &(optional_list_[tmp_string]);
        docline = false;
        {stack[top++] = cs; cs = 1265; goto _again;}
      }}
	break;
	case 112:
#line 537 "mfilescanner.rl"
	{te = p+1;{
        clist_ = &(retval_list_[tmp_string]);
        docline = false;
        {stack[top++] = cs; cs = 1265; goto _again;}
      }}
	break;
	case 113:
#line 547 "mfilescanner.rl"
	{te = p+1;{
        clist_ = &param_list_;
        docline = false;
        {stack[top++] = cs; cs = 1265; goto _again;}
      }}
	break;
	case 114:
#line 557 "mfilescanner.rl"
	{te = p+1;{
        clist_ = &return_list_;
        docline = false;
        {stack[top++] = cs; cs = 1265; goto _again;}
      }}
	break;
	case 115:
#line 568 "mfilescanner.rl"
	{te = p+1;{
        /*cout << "*\n  ";*/
        docubody_.push_back("\n");
        docline = false;
      }}
	break;
	case 116:
#line 586 "mfilescanner.rl"
	{te = p+1;{
        if(!docline)
        {
          p = ts-1;
          {cs = 1257; goto _again;}
        }
        string s;
        s.assign(tmp_p+1, ts - tmp_p-1);
        docubody_.push_back(s+"@sa ");
        tmp_p = p+1;
      }}
	break;
	case 117:
#line 625 "mfilescanner.rl"
	{te = p+1;{
        if(! docline)
          {cs = 1257; goto _again;}
        else
        {
          docubody_.push_back("@par " + string(tmp_p+1, ts - tmp_p-1)+"\n");
          docline = false;
        }
      }}
	break;
	case 118:
#line 638 "mfilescanner.rl"
	{te = p+1;{
        // cout << "*/\n";
        if(! docline)
        {
          if(is_class_)
          {
            if(class_part_ == Header)
            {
              end_of_class_doc();
              cerr << "3: goto classbody" << endl;
              {cs = 1288; goto _again;}
            } else if(class_part_ == Method)
              {cs = 1257; goto _again;}
            else if(class_part_ == Property)
            {
              end_of_property_doc();
              {cs = 1285; goto _again;}
            }
          }
          else
            {cs = 1257; goto _again;}
        }
        else
        {
          int offset = ( latex_begin ? 0 : 1 );
          docubody_.push_back(string(tmp_p+1, p - tmp_p - offset));
          docline = false;
        }
      }}
	break;
	case 119:
#line 576 "mfilescanner.rl"
	{te = p;p--;{
        if(!docline)
        {
          docline = true;
          tmp_p = p;
        }
      }}
	break;
	case 120:
#line 601 "mfilescanner.rl"
	{te = p;p--;{
        if(!docline)
        {
          p = ts-1;
          {cs = 1257; goto _again;}
        }
      }}
	break;
	case 121:
#line 611 "mfilescanner.rl"
	{te = p;p--;{
        if(!docline)
        {
          p = ts-1;
          {cs = 1257; goto _again;}
        }
      }}
	break;
	case 122:
#line 621 "mfilescanner.rl"
	{te = p;p--;}
	break;
	case 123:
#line 576 "mfilescanner.rl"
	{{p = ((te))-1;}{
        if(!docline)
        {
          docline = true;
          tmp_p = p;
        }
      }}
	break;
	case 124:
#line 601 "mfilescanner.rl"
	{{p = ((te))-1;}{
        if(!docline)
        {
          p = ts-1;
          {cs = 1257; goto _again;}
        }
      }}
	break;
	case 125:
#line 611 "mfilescanner.rl"
	{{p = ((te))-1;}{
        if(!docline)
        {
          p = ts-1;
          {cs = 1257; goto _again;}
        }
      }}
	break;
	case 126:
#line 621 "mfilescanner.rl"
	{{p = ((te))-1;}}
	break;
	case 127:
#line 677 "mfilescanner.rl"
	{te = p+1;}
	break;
	case 128:
#line 680 "mfilescanner.rl"
	{te = p+1;{ {cs = 1277; goto _again;} }}
	break;
	case 129:
#line 708 "mfilescanner.rl"
	{act = 40;}
	break;
	case 130:
#line 691 "mfilescanner.rl"
	{te = p+1;{
        /* cout << "*"; cout.write(tmp_p, p - tmp_p+1); */
        docuheader_.push_back(string(tmp_p, p - tmp_p+1));
      }}
	break;
	case 131:
#line 698 "mfilescanner.rl"
	{te = p+1;{
        /*cout << "*\n";*/
#ifdef DEBUG
  cerr << "in doxy_get_brief: goto: doxy_get_body" << endl;
#endif
        {cs = 1268; goto _again;}
      }}
	break;
	case 132:
#line 708 "mfilescanner.rl"
	{te = p+1;{
        p=ts-1;
#ifdef DEBUG
  cerr << "in doxy_get_brief: end??" << endl;
#endif
        //cout << "*/\n";
        if(is_class_)
        {
          if(class_part_ == Header)
          {
            end_of_class_doc();
            cerr << "4: goto classbody" << endl;
            {cs = 1288; goto _again;}
          } else if(class_part_ == Method)
          {
#ifdef DEBUG
  cerr << "in_doxy_get_brief: method: goto funcbody" << endl;
#endif
            {cs = 1257; goto _again;}
          }
          else if(class_part_ == Property)
          {
            end_of_property_doc();
            {cs = 1285; goto _again;}
          }
        }
        else
          {cs = 1257; goto _again;}
      }}
	break;
	case 133:
#line 708 "mfilescanner.rl"
	{te = p;p--;{
        p=ts-1;
#ifdef DEBUG
  cerr << "in doxy_get_brief: end??" << endl;
#endif
        //cout << "*/\n";
        if(is_class_)
        {
          if(class_part_ == Header)
          {
            end_of_class_doc();
            cerr << "4: goto classbody" << endl;
            {cs = 1288; goto _again;}
          } else if(class_part_ == Method)
          {
#ifdef DEBUG
  cerr << "in_doxy_get_brief: method: goto funcbody" << endl;
#endif
            {cs = 1257; goto _again;}
          }
          else if(class_part_ == Property)
          {
            end_of_property_doc();
            {cs = 1285; goto _again;}
          }
        }
        else
          {cs = 1257; goto _again;}
      }}
	break;
	case 134:
#line 1 "mfilescanner.rl"
	{	switch( act ) {
	case 0:
	{{cs = 0; goto _again;}}
	break;
	case 40:
	{{p = ((te))-1;}
        p=ts-1;
#ifdef DEBUG
  cerr << "in doxy_get_brief: end??" << endl;
#endif
        //cout << "*/\n";
        if(is_class_)
        {
          if(class_part_ == Header)
          {
            end_of_class_doc();
            cerr << "4: goto classbody" << endl;
            {cs = 1288; goto _again;}
          } else if(class_part_ == Method)
          {
#ifdef DEBUG
  cerr << "in_doxy_get_brief: method: goto funcbody" << endl;
#endif
            {cs = 1257; goto _again;}
          }
          else if(class_part_ == Property)
          {
            end_of_property_doc();
            {cs = 1285; goto _again;}
          }
        }
        else
          {cs = 1257; goto _again;}
      }
	break;
	}
	}
	break;
	case 135:
#line 943 "mfilescanner.rl"
	{act = 42;}
	break;
	case 136:
#line 938 "mfilescanner.rl"
	{te = p+1;{
        cout.write(tmp_p, p - tmp_p+1);
        {stack[top++] = cs; cs = 1234; goto _again;}
      }}
	break;
	case 137:
#line 943 "mfilescanner.rl"
	{te = p+1;{ cout.write(ts, te-ts); }}
	break;
	case 138:
#line 945 "mfilescanner.rl"
	{te = p+1;{ cout << "\n"; }}
	break;
	case 139:
#line 947 "mfilescanner.rl"
	{te = p+1;{
      cerr << "           END OF CLASS !!!!!!!!!!!!!!!!! " << endl;
      cout << "\n}\n";
    }}
	break;
	case 140:
#line 953 "mfilescanner.rl"
	{te = p+1;{
        cerr << "in properties..." << endl;
        propertyparams_ = PropParams();
        access_ = AccessStruct();
        class_part_ = Property;
        {cs = 635; goto _again;}
      }}
	break;
	case 141:
#line 961 "mfilescanner.rl"
	{te = p+1;{
        methodparams_ = MethodParams();
        access_ = AccessStruct();
        class_part_ = Method;
        {cs = 263; goto _again;}
      }}
	break;
	case 142:
#line 968 "mfilescanner.rl"
	{te = p+1;{
        std::string tmp_string(ts, te-ts);
        eventindent_ = tmp_string.find("e");
        class_part_ = Event;
        {cs = 1280; goto _again;}
      }}
	break;
	case 143:
#line 943 "mfilescanner.rl"
	{te = p;p--;{ cout.write(ts, te-ts); }}
	break;
	case 144:
#line 947 "mfilescanner.rl"
	{te = p;p--;{
      cerr << "           END OF CLASS !!!!!!!!!!!!!!!!! " << endl;
      cout << "\n}\n";
    }}
	break;
	case 145:
#line 943 "mfilescanner.rl"
	{{p = ((te))-1;}{ cout.write(ts, te-ts); }}
	break;
	case 146:
#line 1 "mfilescanner.rl"
	{	switch( act ) {
	case 0:
	{{cs = 0; goto _again;}}
	break;
	case 42:
	{{p = ((te))-1;} cout.write(ts, te-ts); }
	break;
	}
	}
	break;
#line 4554 "mfilescanner.cc"
		}
	}

_again:
	_acts = _MFileScanner_actions + _MFileScanner_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 73:
#line 1 "mfilescanner.rl"
	{ts = 0;}
	break;
	case 74:
#line 1 "mfilescanner.rl"
	{act = 0;}
	break;
#line 4571 "mfilescanner.cc"
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _MFileScanner_eof_trans[cs] > 0 ) {
		_trans = _MFileScanner_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	const unsigned char *__acts = _MFileScanner_actions + _MFileScanner_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 3:
#line 45 "mfilescanner.rl"
	{
    cout << "*/\n";
    p--;
    {cs = stack[--top]; goto _again;}
  }
	break;
	case 4:
#line 53 "mfilescanner.rl"
	{
    cerr << "End of file reached!" << endl;
    end_function();
  }
	break;
	case 28:
#line 755 "mfilescanner.rl"
	{
#if DEBUG
        cerr << "doxy_get_brief" << endl;
#endif
        p = tmp_p - 2;
        {cs = 1277; goto _again;}
      }
	break;
	case 55:
#line 988 "mfilescanner.rl"
	{
    p--;
    if(is_class_)
    {
      if(class_part_ == Header)
      {
        end_of_class_doc();
        cerr << "1: goto classbody\n";
        {cs = 1288; goto _again;}
      } else if(class_part_ == Method)
        {cs = 1257; goto _again;}
      else if(class_part_ == Property)
      {
        end_of_property_doc();
        {cs = 1285; goto _again;}
      }
    }
    else
      {cs = 1257; goto _again;}
  }
	break;
	case 72:
#line 1152 "mfilescanner.rl"
	{
    cerr << "goto script" << endl;
    p=tmp_p;
    {cs = 1165; goto _again;}
  }
	break;
#line 4646 "mfilescanner.cc"
		}
	}
	}

	_out: {}
	}

#line 1305 "mfilescanner.rl"

    /* Check if we failed. */
    if ( cs == MFileScanner_error )
    {
      /* Machine failed before finding a token. */
      cerr << std::string(filename_) << ": PARSE ERROR in line " << line << endl;
      exit(-1);
    }

    /* Now set up the prefix. */
    if ( ts == 0 )
    {
      have = rpe - pe;
      /* cerr << "memmove by " << have << "bytes\n";*/
      memmove( buf, pe, have );
    }
    else
    {
      have = rpe - ts;
      /* cerr << "memmove by " << have << "bytes to ts\n";*/
      memmove( buf, ts, have );
    }

    if ( ts != 0 )
    {
      te -= (ts-buf);
      ts = buf;
    }
  }

  return 0;
}

// escape '@' and '\' characters in string \a s
const string & MFileScanner::escape_chars(std::string & s)
{
  string::size_type found = s.find_first_of("@\\");
  while(found != string::npos )
  {
    s.insert(found, "\\");
    found = s.find_first_of("@\\",found+2);
  }
  return s;
}

// standard brief text (replace '_' -> ' ' in s)
const string & MFileScanner::replace_underscore(std::string & s)
{
  string::size_type found = s.find("_");
  while(found != string::npos )
  {
    s[found] = ' ';
    found = s.find("_", found+1);
  }
  return s;
}

// pretty print the documentation block \a block
void MFileScanner::write_docu_block(const DocuBlock & block)
{
  bool add_prefix   = false;
  bool latex_begin  = true;
  bool not_verbatim = true;
  for( unsigned int i = 0; i < block.size(); i += 1 )
  {
    // begin all documentation lines after the first one with an asterisk
    if(add_prefix)
      cout << "* ";

    add_prefix = false;
    // read in new line of docu block
    const string & s = block[i];

    // parse for special comments
    string::size_type j=0;
    const char * tokens = "\'`@\n";
    bool last_char_escaped = false;
    for( string::size_type i = 0; j < s.size(); i=j )
    {
      j=s.find_first_of(tokens,i+1);
      if(j==string::npos)
        j=s.size();
      if(s[j-1] == '\\' && not_verbatim && latex_begin)
        --j;
      // respect @code and @verbatim blocks
      if(s[i] == '@')
      {
        if(s.substr(i+1,4) == "code" || s.substr(i+1,8) == "verbatim")
          not_verbatim = false;
        else if(s.substr(i+1,7) == "endcode" || s.substr(i+1,11) == "endverbatim")
          not_verbatim = true;
        cout << s.substr(i,j-i);
      }
      // use typewriter fonts for words in single quotes
      else if(s[i] == '\'' && not_verbatim && latex_begin)
      {
        if(j != s.size() && s[j] == '\'' && !last_char_escaped)
        {
          cout << "<tt>" << s.substr(i+1, j-i-1) << "</tt>";
          ++j;
        }
        else
          cout << s.substr(i,j-i);
      }
      // use latex output for words in backtick quotes
      else if(s[i] == '`' && not_verbatim)
      {
        string lout;
        if(!last_char_escaped)
        {
          // in case of double backtick quotes, use latex block
          if(s[i+1] == '`')
          {
            if(latex_begin)
              lout = "@f[";
            else
              lout = "@f]";
            ++i;
            j=s.find_first_of(tokens,i+1);
            if(j==string::npos)
              j=s.size();
          }
          else
            lout = "@f$";
          if(latex_begin)
            latex_begin = false;
          else
            latex_begin = true;
          ++i;
        }
        else
        {
          lout = "";
        }
        cout << lout << s.substr(i, j-i);
      }
      // new line
      else if(s[i] == '\n')
      {
        cout << "\n  ";
        if(latex_begin)
          add_prefix = true;
        else
        {
          cout << "  ";
          add_prefix = false;
        }
      }
      else
      {
        cout << s.substr(i,j-i);
      }
      if(s[j-1] != '\\' && s[j] == '\\')
      {
        last_char_escaped = true;
      }
      else
        last_char_escaped = false;
      if(s[j] == '\\')
        ++j;
    }
  }
}

// pretty print the documentation block list \a list for the list item named \a
// item_text. If docu blocks are empty, \a alternative is used. The alternative
// is normally read in by the confscanner.
void MFileScanner::write_docu_list(const DocuList & list,
                                   const string & item_text,
                                   const DocuList & alternative,
                                   const string separator = string())
{
  typedef DocuList :: const_iterator list_iterator;
  list_iterator lit = list.begin();
  // iterate over documentation blocks
  for(; lit != list.end(); ++lit)
  {
    cout << "* " << item_text << " " << (*lit).first << separator << "    ";
    const DocuBlock & block = (*lit).second;
    // block is empty?
    if(block.empty())
    {
      // then look for alternative documentation block form global
      // configuration file or use default text generated from variable name.
      list_iterator alit = alternative.find((*lit).first);
      if(alit == alternative.end() || (*alit).second.empty())
      {
        std::string s((*lit).first);
        cout << replace_underscore(s) << "\n  ";
      }
      else
        write_docu_block((*alit).second);
    }
    else
      write_docu_block(block);
  }
}

// pretty print a documentation block list map \a listmap with prepended title
// \a text. If listmap entry is empty, \a altlistmap is used instead.
void MFileScanner::write_docu_listmap(const DocuListMap & listmap,
                                      const string & text,
                                      const DocuListMap & altlistmap)
{
  typedef DocuListMap :: const_iterator map_iterator;
  if(!listmap.empty())
  {
    map_iterator mit = listmap.begin();
    for(; mit != listmap.end(); ++mit)
    {
      cout << "*\n  ";
      cout << "* " << text << (*mit).first << ":\n  ";
      map_iterator amit = altlistmap.find((*mit).first);
      write_docu_list((*mit).second, "@arg \\c", ( amit != altlistmap.end() ? (*amit).second : DocuList() ), "&nbsp;&mdash;&nbsp;");
    }
//    cout << "* </TABLE>\n  ";

  }
}

void MFileScanner::end_of_class_doc()
{
  cout << "/** @class \"" << classname_ << "\"\n  ";

  cout_ingroup();

  cout << "* @brief ";
  cout_docuheader();
  cout << "*\n  ";
  cout_docubody();
  cout << "*\n ";
  cout_docuextra();
  cout << "*/\n";
}

void MFileScanner::end_of_property_doc()
{
  cout << "/** @brief ";
  cout_docuheader();
  cout << "*\n  ";
  cout_docubody();
  cout << "*\n ";
  cout_docuextra();
  cout << "*/\n";
}

void MFileScanner::cout_docuheader()
{
  if(docuheader_.empty() && cscan_.docuheader_.empty())
  {
    string s(cfuncname_);
    cout << replace_underscore(s) << "\n  ";
  }
  else
  {
    if(! docuheader_.empty())
    {
      write_docu_block(docuheader_);
    }
    if(! cscan_.docuheader_.empty())
    {
      write_docu_block(cscan_.docuheader_);
    }
  }
  docuheader_.clear();
}

void MFileScanner :: cout_docubody()
{
  if(!docubody_.empty())
  {
    cout << "*\n  * ";
    write_docu_block(docubody_);
  }
  docubody_.clear();
  if(!cscan_.docubody_.empty())
  {
    cout << "*\n  * ";
    write_docu_block(cscan_.docubody_);
  }
}

void MFileScanner :: cout_docuextra()
{
  if(! cscan_.docuextra_.empty())
  {
    cout << "*\n  * ";
    write_docu_block(cscan_.docuextra_);
  }
  docuextra_.clear();
}

void MFileScanner :: cout_ingroup()
{
  typedef GroupSet     :: iterator group_iterator;
  // add @ingroup commands from the configuration file
  if((! groupset_.empty() || ! cscan_.groupset_.empty() ))
  {
    cout << "* @ingroup ";
    bool not_first = false;
    group_iterator git = cscan_.groupset_.begin();
    for(; git != cscan_.groupset_.end(); ++git)
    {
      if(not_first)
        cout << " ";
      else
        not_first = true;

      cout << *git;
    }
    groupset_.clear();
  }
  cout << "\n  ";
}

// end a function and pretty print the documentation for this function
void MFileScanner::end_function()
{
  bool is_constructor = false;
  bool is_method = false;
  if(is_class_)
  {
    if(cfuncname_ == classname_)
      is_constructor = true;
    if(class_part_ == Method)
      is_method = true;
  }
  // end function
  if(!is_method || !methodparams_.abstr)
  cout << "}\n";
  if(is_getter_ || is_setter_)
    cout << "*/\n";
  // is the first function?
  if(is_first_function_)
  {
    if(! latex_output_ && ! is_class_)
    {
        // Then make a file documentation block
        cout << "/** @file \"" << filename_ << "\"\n  ";

      cout_ingroup();

      cout << "*/\n";
    }
  }
  cout << "/*";
  if(latex_output_ && !is_class_)
  {
    cout_ingroup();
    cout << "\n  ";
  }
  if(is_setter_ || is_getter_)
  {
    cout << "* @var " << cfuncname_ << "\n  ";
    string temp = (is_setter_ ? "Setter" : "Getter");
    cout << "* @par " << temp << " is implemented\n  *";
  }
  else
  {
    // specify the @fn part
    cout << "* @fn ";
    if(! is_constructor) {
      if(returnlist_.size() == 0)
        cout << "noret::substitute ";
      else if(returnlist_.size() == 1)
      {
        cout << "ret::substitutestart::" << returnlist_[0] << "::retsubstituteend ";
      }
      else
      {
        cout << "rets::substitutestart::";
        for(unsigned int i = 0; i < returnlist_.size(); ++i)
        {
          if(i != 0)
            cout << "::";

          cout << returnlist_[i];
        }
        cout << "::retssubstituteend ";
      }
    }

    bool first = true;
    if(!is_first_function_)
      cout << "mtoc_subst_" << fnname_ << "_tsbus_cotm_";
    cout << cfuncname_;
    if(paramlist_.size() == 0)
      cout << "()\n  ";
    else
    {
#if DEBUG
        cerr << "paramlist size of " << cfuncname_ << ": " << paramlist_.size() << " first element: " << paramlist_[0] << endl;
#endif
      cout << "(";
      for(unsigned int i=0; i < paramlist_.size(); ++i)
      {
        if(!first)
          cout << ",";
        else
          first = false;

        cout << "matlabtypesubstitute " << paramlist_[i];
      }
      cout << ")\n  ";
    }

    // specify the @brief part
    cout << "* @brief ";
  }
  returnlist_.clear();
  paramlist_.clear();
  cout_docuheader();
  cout << "*\n  ";

  // specify the @details part

  // standard body definitions
  cout_docubody();

  // parameters
  if(!param_list_.empty() && !is_getter_ && !is_setter_)
  {
    cout << "*\n  ";
    write_docu_list(param_list_, "@param", cscan_.param_list_);
  }
  param_list_.clear();

  // return values
  if(!return_list_.empty() && !is_constructor && !is_getter_ && !is_setter_)
  {
    cout << "*\n  ";
    write_docu_list(return_list_, "@retval", cscan_.return_list_);
  }
  return_list_.clear();

  // required fields
  write_docu_listmap(required_list_, "@par Required fields of ", cscan_.field_docu_);
  required_list_.clear();

  // optional fields
  write_docu_listmap(optional_list_, "@par Optional fields of ", cscan_.field_docu_);
  optional_list_.clear();

  // return fields
  write_docu_listmap(retval_list_, "@par Generated fields of ", cscan_.field_docu_);
  retval_list_.clear();

  // extra docu fields
  cout_docuextra();
  if( new_syntax_ )
  {
    cout << "* @synupdate Syntax needs to be updated! \n  ";
  }
  cout << "*/\n";
  if(!is_method)
    is_first_function_ = false;

  is_setter_ = false; is_getter_ = false;
}

// main routine
int main(int argc, char ** argv)
{
  istream * fcin;
  std::ifstream fin;
  string filename;
  if(argc >= 2)
  {
    try
    {
      fin.open(argv[1]);
      fcin = &fin;
      filename = argv[1];
    }
    catch (std::ifstream::failure e)
    {
      cout << "Exception opening/reading file";
      exit(-1);
    }
  }
  else
  {
    fcin = &cin;
    filename = "stdin";
  }

  bool latex_output = false;
  if(argc == 3)
  {
    latex_output = (strncmp(argv[2],"1",1)==0) ? true : false;
  }

  std::string conffilename;
  if(argc == 4)
  {
    conffilename = std::string(argv[3]);
  }

  char buf[1000];
  char * dummy = getcwd(buf, 1000);
  dummy = 0;

  string::size_type found = 0;
  string cwd(buf);
  found = filename.find(cwd);
  if(found!=string::npos)
    filename = filename.substr(cwd.size()+1);
  MFileScanner scanner(*fcin, filename, conffilename, latex_output);
  scanner.execute();
  return 0;
}

/* vim: set et sw=2 ft=ragel: */

